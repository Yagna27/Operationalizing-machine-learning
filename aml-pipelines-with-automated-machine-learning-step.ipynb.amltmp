{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Copyright (c) Microsoft Corporation. All rights reserved.  \n",
        "Licensed under the MIT License."
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "![Impressions](https://PixelServer20190423114238.azurewebsites.net/api/impressions/NotebookVM/how-to-use-azureml/machine-learning-pipelines/intro-to-pipelines/aml-pipelines-with-automated-machine-learning-step.png)"
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Azure Machine Learning Pipeline with AutoMLStep (Udacity Course 2)\n",
        "This notebook demonstrates the use of AutoMLStep in Azure Machine Learning Pipeline."
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Introduction\n",
        "In this example we showcase how you can use AzureML Dataset to load data for AutoML via AML Pipeline. \n",
        "\n",
        "If you are using an Azure Machine Learning Notebook VM, you are all set. Otherwise, make sure you have executed the [configuration](https://aka.ms/pl-config) before running this notebook.\n",
        "\n",
        "In this notebook you will learn how to:\n",
        "1. Create an `Experiment` in an existing `Workspace`.\n",
        "2. Create or Attach existing AmlCompute to a workspace.\n",
        "3. Define data loading in a `TabularDataset`.\n",
        "4. Configure AutoML using `AutoMLConfig`.\n",
        "5. Use AutoMLStep\n",
        "6. Train the model using AmlCompute\n",
        "7. Explore the results.\n",
        "8. Test the best fitted model."
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Azure Machine Learning and Pipeline SDK-specific imports"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import logging\n",
        "import os\n",
        "import csv\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn import datasets\n",
        "import pkg_resources\n",
        "\n",
        "import azureml.core\n",
        "from azureml.core.experiment import Experiment\n",
        "from azureml.core.workspace import Workspace\n",
        "from azureml.train.automl import AutoMLConfig\n",
        "from azureml.core.dataset import Dataset\n",
        "\n",
        "from azureml.pipeline.steps import AutoMLStep\n",
        "\n",
        "# Check core SDK version number\n",
        "print(\"SDK version:\", azureml.core.VERSION)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SDK version: 1.26.0\n"
          ]
        }
      ],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1618334469126
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Initialize Workspace\n",
        "Initialize a workspace object from persisted configuration. Make sure the config file is present at .\\config.json"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "ws = Workspace.from_config()\n",
        "print(ws.name, ws.resource_group, ws.location, ws.subscription_id, sep = '\\n')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Performing interactive authentication. Please follow the instructions on the terminal.\n",
            "To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code ACY7JBJ45 to authenticate.\n",
            "You have logged in. Now let us find all the subscriptions to which you have access...\n",
            "Interactive authentication successfully completed.\n",
            "quick-starts-ws-142596\n",
            "aml-quickstarts-142596\n",
            "southcentralus\n",
            "6b4af8be-9931-443e-90f6-c4c34a1f9737\n"
          ]
        }
      ],
      "execution_count": 4,
      "metadata": {
        "gather": {
          "logged": 1618334677482
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Create an Azure ML experiment\n",
        "Let's create an experiment named \"automlstep-classification\" and a folder to hold the training scripts. The script runs will be recorded under the experiment in Azure.\n",
        "\n",
        "The best practice is to use separate folders for scripts and its dependent files for each step and specify that folder as the `source_directory` for the step. This helps reduce the size of the snapshot created for the step (only the specific folder is snapshotted). Since changes in any files in the `source_directory` would trigger a re-upload of the snapshot, this helps keep the reuse of the step when there are no changes in the `source_directory` of the step.\n",
        "\n",
        "*Udacity Note:* There is no need to create an Azure ML experiment, this needs to re-use the experiment that was already created\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Choose a name for the run history container in the workspace.\n",
        "# NOTE: update these to match your existing experiment name\n",
        "experiment_name = 'myproject2'\n",
        "project_folder = './pipeline-project'\n",
        "\n",
        "experiment = Experiment(ws, experiment_name)\n",
        "experiment"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 5,
          "data": {
            "text/plain": "Experiment(Name: myproject2,\nWorkspace: quick-starts-ws-142596)",
            "text/html": "<table style=\"width:100%\"><tr><th>Name</th><th>Workspace</th><th>Report Page</th><th>Docs Page</th></tr><tr><td>myproject2</td><td>quick-starts-ws-142596</td><td><a href=\"https://ml.azure.com/experiments/id/d287b3b9-66db-4827-a442-99741988afee?wsid=/subscriptions/6b4af8be-9931-443e-90f6-c4c34a1f9737/resourcegroups/aml-quickstarts-142596/workspaces/quick-starts-ws-142596&amp;tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\" target=\"_blank\" rel=\"noopener\">Link to Azure Machine Learning studio</a></td><td><a href=\"https://docs.microsoft.com/en-us/python/api/azureml-core/azureml.core.experiment.Experiment?view=azure-ml-py\" target=\"_blank\" rel=\"noopener\">Link to Documentation</a></td></tr></table>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 5,
      "metadata": {
        "gather": {
          "logged": 1618334686940
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Create or Attach an AmlCompute cluster\n",
        "You will need to create a [compute target](https://docs.microsoft.com/azure/machine-learning/service/concept-azure-machine-learning-architecture#compute-target) for your AutoML run. In this tutorial, you get the default `AmlCompute` as your training compute resource.\n",
        "\n",
        "**Udacity Note** There is no need to create a new compute target, it can re-use the previous cluster"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.compute import AmlCompute\n",
        "from azureml.core.compute import ComputeTarget\n",
        "from azureml.core.compute_target import ComputeTargetException\n",
        "\n",
        "# NOTE: update the cluster name to match the existing cluster\n",
        "# Choose a name for your CPU cluster\n",
        "amlcompute_cluster_name = \"mycompute3\"\n",
        "\n",
        "# Verify that cluster does not exist already\n",
        "try:\n",
        "    compute_target = ComputeTarget(workspace=ws, name=amlcompute_cluster_name)\n",
        "    print('Found existing cluster, use it.')\n",
        "except ComputeTargetException:\n",
        "    compute_config = AmlCompute.provisioning_configuration(vm_size='STANDARD_D2_V2',# for GPU, use \"STANDARD_NC6\"\n",
        "                                                           #vm_priority = 'lowpriority', # optional\n",
        "                                                           max_nodes=4)\n",
        "    compute_target = ComputeTarget.create(ws, amlcompute_cluster_name, compute_config)\n",
        "\n",
        "#compute_target.wait_for_completion(show_output=True, min_node_count = 1, timeout_in_minutes = 10)\n",
        "# For a more detailed view of current AmlCompute status, use get_status()."
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found existing cluster, use it.\n"
          ]
        }
      ],
      "execution_count": 8,
      "metadata": {
        "gather": {
          "logged": 1618334794788
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Data\n",
        "\n",
        "**Udacity note:** Make sure the `key` is the same name as the dataset that is uploaded, and that the description matches. If it is hard to find or unknown, loop over the `ws.datasets.keys()` and `print()` them.\n",
        "If it *isn't* found because it was deleted, it can be recreated with the link that has the CSV "
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Try to load the dataset from the Workspace. Otherwise, create it from the file\n",
        "# NOTE: update the key to match the dataset name\n",
        "found = False\n",
        "key = \"BankMarketing Dataset\"\n",
        "description_text = \"Bank Marketing DataSet for Udacity Course 2\"\n",
        "\n",
        "if key in ws.datasets.keys(): \n",
        "        found = True\n",
        "        dataset = ws.datasets[key] \n",
        "\n",
        "if not found:\n",
        "        # Create AML Dataset and register it into Workspace\n",
        "        example_data = 'https://automlsamplenotebookdata.blob.core.windows.net/automl-sample-notebook-data/bankmarketing_train.csv'\n",
        "        dataset = Dataset.Tabular.from_delimited_files(example_data)        \n",
        "        #Register Dataset in Workspace\n",
        "        dataset = dataset.register(workspace=ws,\n",
        "                                   name=key,\n",
        "                                   description=description_text)\n",
        "\n",
        "\n",
        "df = dataset.to_pandas_dataframe()\n",
        "df.describe()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 9,
          "data": {
            "text/plain": "                age      duration      campaign         pdays      previous  \\\ncount  32950.000000  32950.000000  32950.000000  32950.000000  32950.000000   \nmean      40.040212    257.335205      2.561730    962.174780      0.174780   \nstd       10.432313    257.331700      2.763646    187.646785      0.496503   \nmin       17.000000      0.000000      1.000000      0.000000      0.000000   \n25%       32.000000    102.000000      1.000000    999.000000      0.000000   \n50%       38.000000    179.000000      2.000000    999.000000      0.000000   \n75%       47.000000    318.000000      3.000000    999.000000      0.000000   \nmax       98.000000   4918.000000     56.000000    999.000000      7.000000   \n\n       emp.var.rate  cons.price.idx  cons.conf.idx     euribor3m   nr.employed  \ncount  32950.000000    32950.000000   32950.000000  32950.000000  32950.000000  \nmean       0.076228       93.574243     -40.518680      3.615654   5166.859608  \nstd        1.572242        0.578636       4.623004      1.735748     72.208448  \nmin       -3.400000       92.201000     -50.800000      0.634000   4963.600000  \n25%       -1.800000       93.075000     -42.700000      1.344000   5099.100000  \n50%        1.100000       93.749000     -41.800000      4.857000   5191.000000  \n75%        1.400000       93.994000     -36.400000      4.961000   5228.100000  \nmax        1.400000       94.767000     -26.900000      5.045000   5228.100000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>duration</th>\n      <th>campaign</th>\n      <th>pdays</th>\n      <th>previous</th>\n      <th>emp.var.rate</th>\n      <th>cons.price.idx</th>\n      <th>cons.conf.idx</th>\n      <th>euribor3m</th>\n      <th>nr.employed</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n      <td>32950.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>40.040212</td>\n      <td>257.335205</td>\n      <td>2.561730</td>\n      <td>962.174780</td>\n      <td>0.174780</td>\n      <td>0.076228</td>\n      <td>93.574243</td>\n      <td>-40.518680</td>\n      <td>3.615654</td>\n      <td>5166.859608</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>10.432313</td>\n      <td>257.331700</td>\n      <td>2.763646</td>\n      <td>187.646785</td>\n      <td>0.496503</td>\n      <td>1.572242</td>\n      <td>0.578636</td>\n      <td>4.623004</td>\n      <td>1.735748</td>\n      <td>72.208448</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>17.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>-3.400000</td>\n      <td>92.201000</td>\n      <td>-50.800000</td>\n      <td>0.634000</td>\n      <td>4963.600000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>32.000000</td>\n      <td>102.000000</td>\n      <td>1.000000</td>\n      <td>999.000000</td>\n      <td>0.000000</td>\n      <td>-1.800000</td>\n      <td>93.075000</td>\n      <td>-42.700000</td>\n      <td>1.344000</td>\n      <td>5099.100000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>38.000000</td>\n      <td>179.000000</td>\n      <td>2.000000</td>\n      <td>999.000000</td>\n      <td>0.000000</td>\n      <td>1.100000</td>\n      <td>93.749000</td>\n      <td>-41.800000</td>\n      <td>4.857000</td>\n      <td>5191.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>47.000000</td>\n      <td>318.000000</td>\n      <td>3.000000</td>\n      <td>999.000000</td>\n      <td>0.000000</td>\n      <td>1.400000</td>\n      <td>93.994000</td>\n      <td>-36.400000</td>\n      <td>4.961000</td>\n      <td>5228.100000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>98.000000</td>\n      <td>4918.000000</td>\n      <td>56.000000</td>\n      <td>999.000000</td>\n      <td>7.000000</td>\n      <td>1.400000</td>\n      <td>94.767000</td>\n      <td>-26.900000</td>\n      <td>5.045000</td>\n      <td>5228.100000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 9,
      "metadata": {
        "gather": {
          "logged": 1618334840529
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Review the Dataset Result\n",
        "\n",
        "You can peek the result of a TabularDataset at any range using `skip(i)` and `take(j).to_pandas_dataframe()`. Doing so evaluates only `j` records for all the steps in the TabularDataset, which makes it fast even against large datasets.\n",
        "\n",
        "`TabularDataset` objects are composed of a list of transformation steps (optional)."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.take(5).to_pandas_dataframe()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 10,
          "data": {
            "text/plain": "   age          job  marital    education  default housing loan    contact  \\\n0   57   technician  married  high.school       no      no  yes   cellular   \n1   55      unknown  married      unknown  unknown     yes   no  telephone   \n2   33  blue-collar  married     basic.9y       no      no   no   cellular   \n3   36       admin.  married  high.school       no      no   no  telephone   \n4   27    housemaid  married  high.school       no     yes   no   cellular   \n\n  month day_of_week  ...  campaign  pdays  previous     poutcome emp.var.rate  \\\n0   may         mon  ...         1    999         1      failure         -1.8   \n1   may         thu  ...         2    999         0  nonexistent          1.1   \n2   may         fri  ...         1    999         1      failure         -1.8   \n3   jun         fri  ...         4    999         0  nonexistent          1.4   \n4   jul         fri  ...         2    999         0  nonexistent          1.4   \n\n   cons.price.idx  cons.conf.idx  euribor3m  nr.employed   y  \n0          92.893          -46.2      1.299       5099.1  no  \n1          93.994          -36.4      4.860       5191.0  no  \n2          92.893          -46.2      1.313       5099.1  no  \n3          94.465          -41.8      4.967       5228.1  no  \n4          93.918          -42.7      4.963       5228.1  no  \n\n[5 rows x 21 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>job</th>\n      <th>marital</th>\n      <th>education</th>\n      <th>default</th>\n      <th>housing</th>\n      <th>loan</th>\n      <th>contact</th>\n      <th>month</th>\n      <th>day_of_week</th>\n      <th>...</th>\n      <th>campaign</th>\n      <th>pdays</th>\n      <th>previous</th>\n      <th>poutcome</th>\n      <th>emp.var.rate</th>\n      <th>cons.price.idx</th>\n      <th>cons.conf.idx</th>\n      <th>euribor3m</th>\n      <th>nr.employed</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>57</td>\n      <td>technician</td>\n      <td>married</td>\n      <td>high.school</td>\n      <td>no</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>cellular</td>\n      <td>may</td>\n      <td>mon</td>\n      <td>...</td>\n      <td>1</td>\n      <td>999</td>\n      <td>1</td>\n      <td>failure</td>\n      <td>-1.8</td>\n      <td>92.893</td>\n      <td>-46.2</td>\n      <td>1.299</td>\n      <td>5099.1</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>55</td>\n      <td>unknown</td>\n      <td>married</td>\n      <td>unknown</td>\n      <td>unknown</td>\n      <td>yes</td>\n      <td>no</td>\n      <td>telephone</td>\n      <td>may</td>\n      <td>thu</td>\n      <td>...</td>\n      <td>2</td>\n      <td>999</td>\n      <td>0</td>\n      <td>nonexistent</td>\n      <td>1.1</td>\n      <td>93.994</td>\n      <td>-36.4</td>\n      <td>4.860</td>\n      <td>5191.0</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>33</td>\n      <td>blue-collar</td>\n      <td>married</td>\n      <td>basic.9y</td>\n      <td>no</td>\n      <td>no</td>\n      <td>no</td>\n      <td>cellular</td>\n      <td>may</td>\n      <td>fri</td>\n      <td>...</td>\n      <td>1</td>\n      <td>999</td>\n      <td>1</td>\n      <td>failure</td>\n      <td>-1.8</td>\n      <td>92.893</td>\n      <td>-46.2</td>\n      <td>1.313</td>\n      <td>5099.1</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>36</td>\n      <td>admin.</td>\n      <td>married</td>\n      <td>high.school</td>\n      <td>no</td>\n      <td>no</td>\n      <td>no</td>\n      <td>telephone</td>\n      <td>jun</td>\n      <td>fri</td>\n      <td>...</td>\n      <td>4</td>\n      <td>999</td>\n      <td>0</td>\n      <td>nonexistent</td>\n      <td>1.4</td>\n      <td>94.465</td>\n      <td>-41.8</td>\n      <td>4.967</td>\n      <td>5228.1</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>27</td>\n      <td>housemaid</td>\n      <td>married</td>\n      <td>high.school</td>\n      <td>no</td>\n      <td>yes</td>\n      <td>no</td>\n      <td>cellular</td>\n      <td>jul</td>\n      <td>fri</td>\n      <td>...</td>\n      <td>2</td>\n      <td>999</td>\n      <td>0</td>\n      <td>nonexistent</td>\n      <td>1.4</td>\n      <td>93.918</td>\n      <td>-42.7</td>\n      <td>4.963</td>\n      <td>5228.1</td>\n      <td>no</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 21 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 10,
      "metadata": {
        "gather": {
          "logged": 1618334870306
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Train\n",
        "This creates a general AutoML settings object.\n",
        "**Udacity notes:** These inputs must match what was used when training in the portal. `label_column_name` has to be `y` for example."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "automl_settings = {\n",
        "    \"experiment_timeout_minutes\": 20,\n",
        "    \"max_concurrent_iterations\": 5,\n",
        "    \"primary_metric\" : 'AUC_weighted'\n",
        "}\n",
        "automl_config = AutoMLConfig(compute_target=compute_target,\n",
        "                             task = \"classification\",\n",
        "                             training_data=dataset,\n",
        "                             label_column_name=\"y\",   \n",
        "                             path = project_folder,\n",
        "                             enable_early_stopping= True,\n",
        "                             featurization= 'auto',\n",
        "                             debug_log = \"automl_errors.log\",\n",
        "                             **automl_settings\n",
        "                            )"
      ],
      "outputs": [],
      "execution_count": 11,
      "metadata": {
        "gather": {
          "logged": 1618334887431
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Create Pipeline and AutoMLStep\n",
        "\n",
        "You can define outputs for the AutoMLStep using TrainingOutput."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.pipeline.core import PipelineData, TrainingOutput\n",
        "\n",
        "ds = ws.get_default_datastore()\n",
        "metrics_output_name = 'metrics_output'\n",
        "best_model_output_name = 'best_model_output'\n",
        "\n",
        "metrics_data = PipelineData(name='metrics_data',\n",
        "                           datastore=ds,\n",
        "                           pipeline_output_name=metrics_output_name,\n",
        "                           training_output=TrainingOutput(type='Metrics'))\n",
        "model_data = PipelineData(name='model_data',\n",
        "                           datastore=ds,\n",
        "                           pipeline_output_name=best_model_output_name,\n",
        "                           training_output=TrainingOutput(type='Model'))"
      ],
      "outputs": [],
      "execution_count": 12,
      "metadata": {
        "gather": {
          "logged": 1618334894665
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Create an AutoMLStep."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "automl_step = AutoMLStep(\n",
        "    name='automl_module',\n",
        "    automl_config=automl_config,\n",
        "    outputs=[metrics_data, model_data],\n",
        "    allow_reuse=True)"
      ],
      "outputs": [],
      "execution_count": 13,
      "metadata": {
        "tags": [
          "automlstep-remarks-sample1"
        ],
        "gather": {
          "logged": 1618334905818
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.pipeline.core import Pipeline\n",
        "pipeline = Pipeline(\n",
        "    description=\"pipeline_with_automlstep\",\n",
        "    workspace=ws,    \n",
        "    steps=[automl_step])"
      ],
      "outputs": [],
      "execution_count": 14,
      "metadata": {
        "tags": [
          "automlstep-remarks-sample2"
        ],
        "gather": {
          "logged": 1618334912574
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pipeline_run = experiment.submit(pipeline)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Created step automl_module [402ee70e][eb73cad6-4499-4386-bf76-2a3171d021ff], (This step will run and generate new outputs)\n",
            "Submitted PipelineRun 3d5d5bef-98c8-498f-8234-d4932d3ab8ed\n",
            "Link to Azure Machine Learning Portal: https://ml.azure.com/runs/3d5d5bef-98c8-498f-8234-d4932d3ab8ed?wsid=/subscriptions/6b4af8be-9931-443e-90f6-c4c34a1f9737/resourcegroups/aml-quickstarts-142596/workspaces/quick-starts-ws-142596&tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\n"
          ]
        }
      ],
      "execution_count": 15,
      "metadata": {
        "gather": {
          "logged": 1618334916301
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.widgets import RunDetails\n",
        "RunDetails(pipeline_run).show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "_PipelineWidget(widget_settings={'childWidgetDisplay': 'popup', 'send_telemetry': False, 'log_level': 'INFO', …",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "114fb7ce2c8f48e4b1515fc97b41f45b"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/aml.mini.widget.v1": "{\"status\": \"Completed\", \"workbench_run_details_uri\": \"https://ml.azure.com/runs/3d5d5bef-98c8-498f-8234-d4932d3ab8ed?wsid=/subscriptions/6b4af8be-9931-443e-90f6-c4c34a1f9737/resourcegroups/aml-quickstarts-142596/workspaces/quick-starts-ws-142596&tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\", \"run_id\": \"3d5d5bef-98c8-498f-8234-d4932d3ab8ed\", \"run_properties\": {\"run_id\": \"3d5d5bef-98c8-498f-8234-d4932d3ab8ed\", \"created_utc\": \"2021-04-13T17:28:35.140178Z\", \"properties\": {\"azureml.runsource\": \"azureml.PipelineRun\", \"runSource\": \"SDK\", \"runType\": \"SDK\", \"azureml.parameters\": \"{}\"}, \"tags\": {\"azureml.pipelineComponent\": \"pipelinerun\"}, \"end_time_utc\": \"2021-04-13T18:04:40.880181Z\", \"status\": \"Completed\", \"log_files\": {\"logs/azureml/executionlogs.txt\": \"https://mlstrg142596.blob.core.windows.net/azureml/ExperimentRun/dcid.3d5d5bef-98c8-498f-8234-d4932d3ab8ed/logs/azureml/executionlogs.txt?sv=2019-02-02&sr=b&sig=F7ahc6nF0MnngaTaTlngb1P0XiNu2ZH%2BXfcd70%2BJRuA%3D&st=2021-04-13T17%3A18%3A58Z&se=2021-04-14T01%3A28%3A58Z&sp=r\", \"logs/azureml/stderrlogs.txt\": \"https://mlstrg142596.blob.core.windows.net/azureml/ExperimentRun/dcid.3d5d5bef-98c8-498f-8234-d4932d3ab8ed/logs/azureml/stderrlogs.txt?sv=2019-02-02&sr=b&sig=sUZwlxgpkZgIEe%2Boc8oEGIcwuaG4pfjjEYTya2EY8D4%3D&st=2021-04-13T17%3A18%3A58Z&se=2021-04-14T01%3A28%3A58Z&sp=r\", \"logs/azureml/stdoutlogs.txt\": \"https://mlstrg142596.blob.core.windows.net/azureml/ExperimentRun/dcid.3d5d5bef-98c8-498f-8234-d4932d3ab8ed/logs/azureml/stdoutlogs.txt?sv=2019-02-02&sr=b&sig=1x%2FqP8r3pK4c6K3xJZ0TexIw7F5h5fo7ZEQ0WBXuucs%3D&st=2021-04-13T17%3A18%3A58Z&se=2021-04-14T01%3A28%3A58Z&sp=r\"}, \"log_groups\": [[\"logs/azureml/executionlogs.txt\", \"logs/azureml/stderrlogs.txt\", \"logs/azureml/stdoutlogs.txt\"]], \"run_duration\": \"0:36:05\", \"run_number\": \"56\", \"run_queued_details\": {\"status\": \"Finished\", \"details\": null}}, \"child_runs\": [{\"run_id\": \"7496f569-5228-4588-a8ee-0521264f1d3d\", \"name\": \"automl_module\", \"status\": \"Finished\", \"start_time\": \"2021-04-13T17:29:00.042844Z\", \"created_time\": \"2021-04-13T17:28:39.64143Z\", \"end_time\": \"2021-04-13T18:02:45.797896Z\", \"duration\": \"0:34:06\", \"run_number\": 57, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2021-04-13T17:28:39.64143Z\", \"is_reused\": \"\"}], \"children_metrics\": {\"categories\": null, \"series\": null, \"metricName\": null}, \"run_metrics\": [], \"run_logs\": \"[2021-04-13 17:28:39Z] Submitting 1 runs, first five are: 402ee70e:7496f569-5228-4588-a8ee-0521264f1d3d\\n[2021-04-13 18:04:40Z] Completing processing run id 7496f569-5228-4588-a8ee-0521264f1d3d.\\n\\nRun is completed.\", \"graph\": {\"datasource_nodes\": {\"32d4d5a2\": {\"node_id\": \"32d4d5a2\", \"name\": \"BankMarketing Dataset\"}}, \"module_nodes\": {\"402ee70e\": {\"node_id\": \"402ee70e\", \"name\": \"automl_module\", \"status\": \"Finished\", \"_is_reused\": false, \"run_id\": \"7496f569-5228-4588-a8ee-0521264f1d3d\"}}, \"edges\": [{\"source_node_id\": \"32d4d5a2\", \"source_node_name\": \"BankMarketing Dataset\", \"source_name\": \"data\", \"target_name\": \"training_data\", \"dst_node_id\": \"402ee70e\", \"dst_node_name\": \"automl_module\"}], \"child_runs\": [{\"run_id\": \"7496f569-5228-4588-a8ee-0521264f1d3d\", \"name\": \"automl_module\", \"status\": \"Finished\", \"start_time\": \"2021-04-13T17:29:00.042844Z\", \"created_time\": \"2021-04-13T17:28:39.64143Z\", \"end_time\": \"2021-04-13T18:02:45.797896Z\", \"duration\": \"0:34:06\", \"run_number\": 57, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2021-04-13T17:28:39.64143Z\", \"is_reused\": \"\"}]}, \"widget_settings\": {\"childWidgetDisplay\": \"popup\", \"send_telemetry\": false, \"log_level\": \"INFO\", \"sdk_version\": \"1.26.0\"}, \"loading\": false}"
          },
          "metadata": {}
        }
      ],
      "execution_count": 16,
      "metadata": {
        "gather": {
          "logged": 1618334917844
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pipeline_run.wait_for_completion()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PipelineRunId: 3d5d5bef-98c8-498f-8234-d4932d3ab8ed\n",
            "Link to Azure Machine Learning Portal: https://ml.azure.com/runs/3d5d5bef-98c8-498f-8234-d4932d3ab8ed?wsid=/subscriptions/6b4af8be-9931-443e-90f6-c4c34a1f9737/resourcegroups/aml-quickstarts-142596/workspaces/quick-starts-ws-142596&tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\n",
            "PipelineRun Status: Running\n",
            "\n",
            "\n",
            "StepRunId: 7496f569-5228-4588-a8ee-0521264f1d3d\n",
            "Link to Azure Machine Learning Portal: https://ml.azure.com/runs/7496f569-5228-4588-a8ee-0521264f1d3d?wsid=/subscriptions/6b4af8be-9931-443e-90f6-c4c34a1f9737/resourcegroups/aml-quickstarts-142596/workspaces/quick-starts-ws-142596&tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\n",
            "StepRun( automl_module ) Status: Running\n",
            "\n",
            "StepRun(automl_module) Execution Summary\n",
            "=========================================\n",
            "StepRun( automl_module ) Status: Finished\n",
            "{'runId': '7496f569-5228-4588-a8ee-0521264f1d3d', 'target': 'mycompute3', 'status': 'Completed', 'startTimeUtc': '2021-04-13T17:29:00.042844Z', 'endTimeUtc': '2021-04-13T18:02:45.797896Z', 'properties': {'ContentSnapshotId': '3723874d-ee54-413b-a3ae-bbdc13160555', 'StepType': 'AutoMLStep', 'azureml.moduleid': 'eb73cad6-4499-4386-bf76-2a3171d021ff', 'azureml.runsource': 'azureml.StepRun', 'azureml.nodeid': '402ee70e', 'azureml.pipelinerunid': '3d5d5bef-98c8-498f-8234-d4932d3ab8ed', 'num_iterations': '1000', 'training_type': 'TrainFull', 'acquisition_function': 'EI', 'metrics': 'accuracy', 'primary_metric': 'AUC_weighted', 'train_split': '0', 'MaxTimeSeconds': None, 'acquisition_parameter': '0', 'num_cross_validation': None, 'target': 'mycompute3', 'RawAMLSettingsString': None, 'AMLSettingsJsonString': '{\"path\": null, \"name\": \"placeholder\", \"subscription_id\": \"6b4af8be-9931-443e-90f6-c4c34a1f9737\", \"resource_group\": \"aml-quickstarts-142596\", \"workspace_name\": \"quick-starts-ws-142596\", \"region\": \"southcentralus\", \"compute_target\": \"mycompute3\", \"spark_service\": null, \"azure_service\": null, \"many_models\": false, \"pipeline_fetch_max_batch_size\": 1, \"enable_batch_run\": false, \"enable_run_restructure\": false, \"iterations\": 1000, \"primary_metric\": \"AUC_weighted\", \"task_type\": \"classification\", \"data_script\": null, \"test_size\": 0.0, \"validation_size\": 0.0, \"n_cross_validations\": null, \"y_min\": null, \"y_max\": null, \"num_classes\": null, \"featurization\": \"auto\", \"_ignore_package_version_incompatibilities\": false, \"is_timeseries\": false, \"max_cores_per_iteration\": 1, \"max_concurrent_iterations\": 5, \"iteration_timeout_minutes\": null, \"mem_in_mb\": null, \"enforce_time_on_windows\": false, \"experiment_timeout_minutes\": 20, \"experiment_exit_score\": null, \"whitelist_models\": null, \"blacklist_algos\": null, \"supported_models\": [\"SVM\", \"MultinomialNaiveBayes\", \"DecisionTree\", \"TensorFlowLinearClassifier\", \"TensorFlowDNN\", \"GradientBoosting\", \"KNN\", \"LogisticRegression\", \"LinearSVM\", \"LightGBM\", \"ExtremeRandomTrees\", \"XGBoostClassifier\", \"SGD\", \"RandomForest\", \"BernoulliNaiveBayes\", \"AveragedPerceptronClassifier\"], \"private_models\": [], \"auto_blacklist\": true, \"blacklist_samples_reached\": false, \"exclude_nan_labels\": true, \"verbosity\": 20, \"_debug_log\": \"automl_errors.log\", \"show_warnings\": false, \"model_explainability\": true, \"service_url\": null, \"sdk_url\": null, \"sdk_packages\": null, \"enable_onnx_compatible_models\": false, \"enable_split_onnx_featurizer_estimator_models\": false, \"vm_type\": \"STANDARD_DS2_V2\", \"telemetry_verbosity\": 20, \"send_telemetry\": true, \"enable_dnn\": false, \"scenario\": \"SDK-1.13.0\", \"environment_label\": null, \"save_mlflow\": false, \"force_text_dnn\": false, \"enable_feature_sweeping\": true, \"enable_early_stopping\": true, \"early_stopping_n_iters\": 10, \"metrics\": null, \"enable_metric_confidence\": false, \"enable_ensembling\": true, \"enable_stack_ensembling\": true, \"ensemble_iterations\": 15, \"enable_tf\": false, \"enable_subsampling\": null, \"subsample_seed\": null, \"enable_nimbusml\": false, \"enable_streaming\": false, \"force_streaming\": false, \"track_child_runs\": true, \"allowed_private_models\": [], \"label_column_name\": \"y\", \"weight_column_name\": null, \"cv_split_column_names\": null, \"enable_local_managed\": false, \"_local_managed_run_id\": null, \"cost_mode\": 1, \"lag_length\": 0, \"metric_operation\": \"maximize\", \"preprocess\": true}', 'DataPrepJsonString': '{\\\\\"training_data\\\\\": {\\\\\"datasetId\\\\\": \\\\\"b86857d8-0b20-468c-8288-677636c7669f\\\\\"}, \\\\\"datasets\\\\\": 0}', 'EnableSubsampling': 'False', 'runTemplate': 'AutoML', 'Orchestrator': 'automl', 'ClientType': 'Others', '_aml_system_scenario_identification': 'Remote.Parent', 'root_attribution': 'azureml.StepRun', 'snapshotId': '3723874d-ee54-413b-a3ae-bbdc13160555', 'SetupRunId': '7496f569-5228-4588-a8ee-0521264f1d3d_setup', 'SetupRunContainerId': 'dcid.7496f569-5228-4588-a8ee-0521264f1d3d_setup', 'ClientSdkVersion': '1.26.0', 'FeaturizationRunJsonPath': 'featurizer_container.json', 'FeaturizationRunId': '7496f569-5228-4588-a8ee-0521264f1d3d_featurize', 'ProblemInfoJsonString': '{\"dataset_num_categorical\": 0, \"is_sparse\": true, \"subsampling\": false, \"dataset_classes\": 2, \"dataset_features\": 132, \"dataset_samples\": 29655, \"single_frequency_class_detected\": false}', 'ModelExplainRunId': '7496f569-5228-4588-a8ee-0521264f1d3d_ModelExplain'}, 'inputDatasets': [], 'outputDatasets': [], 'logFiles': {'logs/azureml/executionlogs.txt': 'https://mlstrg142596.blob.core.windows.net/azureml/ExperimentRun/dcid.7496f569-5228-4588-a8ee-0521264f1d3d/logs/azureml/executionlogs.txt?sv=2019-02-02&sr=b&sig=FT5fTKNmAccw1J038EWIkLx8YrHkQk7nG4rKSfh8Qks%3D&st=2021-04-13T17%3A20%3A59Z&se=2021-04-14T01%3A30%3A59Z&sp=r', 'logs/azureml/stderrlogs.txt': 'https://mlstrg142596.blob.core.windows.net/azureml/ExperimentRun/dcid.7496f569-5228-4588-a8ee-0521264f1d3d/logs/azureml/stderrlogs.txt?sv=2019-02-02&sr=b&sig=sH%2BoI%2Bb3EThtM0NUbCHowwOB3O50nunb9uSIyBWGZ1w%3D&st=2021-04-13T17%3A20%3A59Z&se=2021-04-14T01%3A30%3A59Z&sp=r', 'logs/azureml/stdoutlogs.txt': 'https://mlstrg142596.blob.core.windows.net/azureml/ExperimentRun/dcid.7496f569-5228-4588-a8ee-0521264f1d3d/logs/azureml/stdoutlogs.txt?sv=2019-02-02&sr=b&sig=cALZc0TP5oKGoDCy5%2FwqE8UeMp%2B0Qmg4t5vkxtNLsXw%3D&st=2021-04-13T17%3A20%3A59Z&se=2021-04-14T01%3A30%3A59Z&sp=r'}, 'submittedBy': 'ODL_User 142596'}\n",
            "\n",
            "\n",
            "\n",
            "PipelineRun Execution Summary\n",
            "==============================\n",
            "PipelineRun Status: Finished\n",
            "{'runId': '3d5d5bef-98c8-498f-8234-d4932d3ab8ed', 'status': 'Completed', 'startTimeUtc': '2021-04-13T17:28:37.209933Z', 'endTimeUtc': '2021-04-13T18:04:40.880181Z', 'properties': {'azureml.runsource': 'azureml.PipelineRun', 'runSource': 'SDK', 'runType': 'SDK', 'azureml.parameters': '{}'}, 'inputDatasets': [], 'outputDatasets': [], 'logFiles': {'logs/azureml/executionlogs.txt': 'https://mlstrg142596.blob.core.windows.net/azureml/ExperimentRun/dcid.3d5d5bef-98c8-498f-8234-d4932d3ab8ed/logs/azureml/executionlogs.txt?sv=2019-02-02&sr=b&sig=F7ahc6nF0MnngaTaTlngb1P0XiNu2ZH%2BXfcd70%2BJRuA%3D&st=2021-04-13T17%3A18%3A58Z&se=2021-04-14T01%3A28%3A58Z&sp=r', 'logs/azureml/stderrlogs.txt': 'https://mlstrg142596.blob.core.windows.net/azureml/ExperimentRun/dcid.3d5d5bef-98c8-498f-8234-d4932d3ab8ed/logs/azureml/stderrlogs.txt?sv=2019-02-02&sr=b&sig=sUZwlxgpkZgIEe%2Boc8oEGIcwuaG4pfjjEYTya2EY8D4%3D&st=2021-04-13T17%3A18%3A58Z&se=2021-04-14T01%3A28%3A58Z&sp=r', 'logs/azureml/stdoutlogs.txt': 'https://mlstrg142596.blob.core.windows.net/azureml/ExperimentRun/dcid.3d5d5bef-98c8-498f-8234-d4932d3ab8ed/logs/azureml/stdoutlogs.txt?sv=2019-02-02&sr=b&sig=1x%2FqP8r3pK4c6K3xJZ0TexIw7F5h5fo7ZEQ0WBXuucs%3D&st=2021-04-13T17%3A18%3A58Z&se=2021-04-14T01%3A28%3A58Z&sp=r'}, 'submittedBy': 'ODL_User 142596'}\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "'Finished'"
          },
          "metadata": {}
        }
      ],
      "execution_count": 17,
      "metadata": {
        "gather": {
          "logged": 1618337082682
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Examine Results\n",
        "\n",
        "### Retrieve the metrics of all child runs\n",
        "Outputs of above run can be used as inputs of other steps in pipeline. In this tutorial, we will examine the outputs by retrieve output data and running some tests."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "metrics_output = pipeline_run.get_pipeline_output(metrics_output_name)\n",
        "num_file_downloaded = metrics_output.download('.', show_progress=True)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading azureml/7496f569-5228-4588-a8ee-0521264f1d3d/metrics_data\n",
            "Downloaded azureml/7496f569-5228-4588-a8ee-0521264f1d3d/metrics_data, 1 files out of an estimated total of 1\n"
          ]
        }
      ],
      "execution_count": 18,
      "metadata": {
        "gather": {
          "logged": 1618337083567
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import json\n",
        "with open(metrics_output._path_on_datastore) as f:\n",
        "    metrics_output_result = f.read()\n",
        "    \n",
        "deserialized_metrics_output = json.loads(metrics_output_result)\n",
        "df = pd.DataFrame(deserialized_metrics_output)\n",
        "df"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 19,
          "data": {
            "text/plain": "                                 7496f569-5228-4588-a8ee-0521264f1d3d_26  \\\nrecall_score_weighted                               [0.9053110773899848]   \nprecision_score_weighted                            [0.8973300225368934]   \naverage_precision_score_weighted                    [0.9467800578009239]   \nprecision_score_micro                               [0.9053110773899848]   \nf1_score_micro                                      [0.9053110773899848]   \nAUC_macro                                           [0.9323229544667286]   \nrecall_score_micro                                  [0.9053110773899848]   \nAUC_weighted                                        [0.9323229544667286]   \nbalanced_accuracy                                   [0.7157791929935704]   \nweighted_accuracy                                   [0.9523667175348892]   \nAUC_micro                                           [0.9763184666149336]   \nf1_score_weighted                                    [0.900338566208004]   \nprecision_score_macro                               [0.7665123477974385]   \naverage_precision_score_micro                       [0.9773886046702771]   \naverage_precision_score_macro                       [0.7928848499541777]   \nnorm_macro_recall                                   [0.4315583859871408]   \nf1_score_macro                                      [0.7373294496397362]   \nrecall_score_macro                                  [0.7157791929935704]   \naccuracy                                            [0.9053110773899848]   \nlog_loss                                           [0.22085530776058526]   \nmatthews_correlation                                [0.4796157600853126]   \n\n                                 7496f569-5228-4588-a8ee-0521264f1d3d_23  \\\nrecall_score_weighted                               [0.9004552352048558]   \nprecision_score_weighted                            [0.8843704047191627]   \naverage_precision_score_weighted                     [0.942782281265217]   \nprecision_score_micro                               [0.9004552352048558]   \nf1_score_micro                                      [0.9004552352048558]   \nAUC_macro                                           [0.9243114252741982]   \nrecall_score_micro                                  [0.9004552352048558]   \nAUC_weighted                                        [0.9243114252741981]   \nbalanced_accuracy                                   [0.5887112459641343]   \nweighted_accuracy                                   [0.9778528352011013]   \nAUC_micro                                           [0.9733974085902907]   \nf1_score_weighted                                   [0.8736142051995415]   \nprecision_score_macro                               [0.8087657878957855]   \naverage_precision_score_micro                       [0.9746121226103798]   \naverage_precision_score_macro                       [0.7791553533474418]   \nnorm_macro_recall                                  [0.17742249192826853]   \nf1_score_macro                                      [0.6212887870981125]   \nrecall_score_macro                                  [0.5887112459641343]   \naccuracy                                            [0.9004552352048558]   \nlog_loss                                           [0.22929027929074844]   \nmatthews_correlation                                [0.3310045181282741]   \n\n                                 7496f569-5228-4588-a8ee-0521264f1d3d_31  \\\nrecall_score_weighted                                 [0.91350531107739]   \nprecision_score_weighted                            [0.9057268790091022]   \naverage_precision_score_weighted                    [0.9498888718010676]   \nprecision_score_micro                                 [0.91350531107739]   \nf1_score_micro                                        [0.91350531107739]   \nAUC_macro                                           [0.9355085792826485]   \nrecall_score_micro                                    [0.91350531107739]   \nAUC_weighted                                        [0.9355085792826485]   \nbalanced_accuracy                                   [0.7298660546414077]   \nweighted_accuracy                                   [0.9590979710926082]   \nAUC_micro                                           [0.9776897446584123]   \nf1_score_weighted                                   [0.9082225005039931]   \nprecision_score_macro                               [0.7939883913764512]   \naverage_precision_score_micro                       [0.9781877451663599]   \naverage_precision_score_macro                       [0.8072969447001531]   \nnorm_macro_recall                                   [0.4597321092828155]   \nf1_score_macro                                      [0.7564455720076384]   \nrecall_score_macro                                  [0.7298660546414077]   \naccuracy                                              [0.91350531107739]   \nlog_loss                                            [0.3230992784115869]   \nmatthews_correlation                                [0.5199151916844855]   \n\n                                 7496f569-5228-4588-a8ee-0521264f1d3d_4  \\\nrecall_score_weighted                              [0.8880121396054628]   \nprecision_score_weighted                            [0.788565560086672]   \naverage_precision_score_weighted                   [0.9254567129958357]   \nprecision_score_micro                              [0.8880121396054628]   \nf1_score_micro                                     [0.8880121396054628]   \nAUC_macro                                          [0.8924264652762728]   \nrecall_score_micro                                 [0.8880121396054628]   \nAUC_weighted                                       [0.8924264652762729]   \nbalanced_accuracy                                                 [0.5]   \nweighted_accuracy                                  [0.9843450583187134]   \nAUC_micro                                          [0.9660630789742125]   \nf1_score_weighted                                  [0.8353395018439429]   \nprecision_score_macro                              [0.4440060698027314]   \naverage_precision_score_micro                      [0.9667154350191383]   \naverage_precision_score_macro                      [0.7212806449332911]   \nnorm_macro_recall                                                 [0.0]   \nf1_score_macro                                     [0.4703423886834914]   \nrecall_score_macro                                                [0.5]   \naccuracy                                           [0.8880121396054628]   \nlog_loss                                           [0.2537019558675518]   \nmatthews_correlation                                              [0.0]   \n\n                                 7496f569-5228-4588-a8ee-0521264f1d3d_30  \\\nrecall_score_weighted                               [0.8980273141122913]   \nprecision_score_weighted                            [0.8933714514421347]   \naverage_precision_score_weighted                    [0.9472515231339906]   \nprecision_score_micro                               [0.8980273141122913]   \nf1_score_micro                                      [0.8980273141122913]   \nAUC_macro                                           [0.9300848203287229]   \nrecall_score_micro                                  [0.8980273141122913]   \nAUC_weighted                                        [0.9300848203287228]   \nbalanced_accuracy                                   [0.5530043697566163]   \nweighted_accuracy                                   [0.9836871784830753]   \nAUC_micro                                           [0.9737985313656365]   \nf1_score_weighted                                   [0.8612210753333667]   \nprecision_score_macro                               [0.8748853631694791]   \naverage_precision_score_micro                       [0.9751136594768869]   \naverage_precision_score_macro                       [0.7959972638369314]   \nnorm_macro_recall                                  [0.10600873951323253]   \nf1_score_macro                                      [0.5689429618001046]   \nrecall_score_macro                                  [0.5530043697566163]   \naccuracy                                            [0.8980273141122913]   \nlog_loss                                           [0.23291460104923292]   \nmatthews_correlation                               [0.28192596479060544]   \n\n                                 7496f569-5228-4588-a8ee-0521264f1d3d_29  \\\nrecall_score_weighted                                 [0.91350531107739]   \nprecision_score_weighted                            [0.9080100799328442]   \naverage_precision_score_weighted                    [0.9539319641567288]   \nprecision_score_micro                                 [0.91350531107739]   \nf1_score_micro                                        [0.91350531107739]   \nAUC_macro                                           [0.9454956682171061]   \nrecall_score_micro                                    [0.91350531107739]   \nAUC_weighted                                        [0.9454956682171062]   \nbalanced_accuracy                                   [0.7476280316460033]   \nweighted_accuracy                                   [0.9546881526557157]   \nAUC_micro                                           [0.9798544260513353]   \nf1_score_weighted                                   [0.9101791103151579]   \nprecision_score_macro                               [0.7889312152158643]   \naverage_precision_score_micro                       [0.9808030510504245]   \naverage_precision_score_macro                       [0.8183292144360064]   \nnorm_macro_recall                                  [0.49525606329200667]   \nf1_score_macro                                      [0.7660249518570629]   \nrecall_score_macro                                  [0.7476280316460033]   \naccuracy                                              [0.91350531107739]   \nlog_loss                                            [0.1780776949679011]   \nmatthews_correlation                                [0.5349671694786223]   \n\n                                 7496f569-5228-4588-a8ee-0521264f1d3d_35  \\\nrecall_score_weighted                               [0.8880121396054628]   \nprecision_score_weighted                             [0.788565560086672]   \naverage_precision_score_weighted                    [0.8011068409624182]   \nprecision_score_micro                               [0.8880121396054628]   \nf1_score_micro                                      [0.8880121396054628]   \nAUC_macro                                                          [0.5]   \nrecall_score_micro                                  [0.8880121396054628]   \nAUC_weighted                                                       [0.5]   \nbalanced_accuracy                                                  [0.5]   \nweighted_accuracy                                   [0.9843450583187134]   \nAUC_micro                                           [0.8880121396054628]   \nf1_score_weighted                                   [0.8353395018439429]   \nprecision_score_macro                               [0.4440060698027314]   \naverage_precision_score_micro                       [0.8445594902839405]   \naverage_precision_score_macro                                      [0.5]   \nnorm_macro_recall                                                  [0.0]   \nf1_score_macro                                      [0.4703423886834914]   \nrecall_score_macro                                                 [0.5]   \naccuracy                                            [0.8880121396054628]   \nlog_loss                                            [0.3543657349711066]   \nmatthews_correlation                                               [0.0]   \n\n                                 7496f569-5228-4588-a8ee-0521264f1d3d_33  \\\nrecall_score_weighted                               [0.9122913505311078]   \nprecision_score_weighted                            [0.9082792354748976]   \naverage_precision_score_weighted                     [0.949787196639461]   \nprecision_score_micro                               [0.9122913505311078]   \nf1_score_micro                                      [0.9122913505311078]   \nAUC_macro                                           [0.9391994398412884]   \nrecall_score_micro                                  [0.9122913505311078]   \nAUC_weighted                                        [0.9391994398412883]   \nbalanced_accuracy                                   [0.7552334272488317]   \nweighted_accuracy                                   [0.9512845845371567]   \nAUC_micro                                           [0.9775007426067454]   \nf1_score_weighted                                   [0.9100167967602312]   \nprecision_score_macro                               [0.7831697452464919]   \naverage_precision_score_micro                       [0.9785050452690133]   \naverage_precision_score_macro                       [0.8031572195939872]   \nnorm_macro_recall                                   [0.5104668544976634]   \nf1_score_macro                                      [0.7681623091472727]   \nrecall_score_macro                                  [0.7552334272488317]   \naccuracy                                            [0.9122913505311078]   \nlog_loss                                            [0.2154093345805161]   \nmatthews_correlation                                 [0.537677913150394]   \n\n                                 7496f569-5228-4588-a8ee-0521264f1d3d_41  \\\nrecall_score_weighted                               [0.9095599393019727]   \nprecision_score_weighted                            [0.9005324142771018]   \naverage_precision_score_weighted                     [0.948595276751151]   \nprecision_score_micro                               [0.9095599393019727]   \nf1_score_micro                                      [0.9095599393019727]   \nAUC_macro                                           [0.9366663147150953]   \nrecall_score_micro                                  [0.9095599393019727]   \nAUC_weighted                                        [0.9366663147150953]   \nbalanced_accuracy                                   [0.7146191420902589]   \nweighted_accuracy                                   [0.9579584661902998]   \nAUC_micro                                           [0.9772814375945528]   \nf1_score_weighted                                    [0.903380422654646]   \nprecision_score_macro                               [0.7827600597434545]   \naverage_precision_score_micro                       [0.9783771487826396]   \naverage_precision_score_macro                       [0.7986233728068056]   \nnorm_macro_recall                                   [0.4292382841805178]   \nf1_score_macro                                      [0.7421454831932772]   \nrecall_score_macro                                  [0.7146191420902589]   \naccuracy                                            [0.9095599393019727]   \nlog_loss                                            [0.1902415116275064]   \nmatthews_correlation                                [0.4926894414924297]   \n\n                                 7496f569-5228-4588-a8ee-0521264f1d3d_5  ...  \\\nrecall_score_weighted                              [0.8977238239757208]  ...   \nprecision_score_weighted                            [0.877014103638037]  ...   \naverage_precision_score_weighted                   [0.9305869047831394]  ...   \nprecision_score_micro                              [0.8977238239757208]  ...   \nf1_score_micro                                     [0.8977238239757208]  ...   \nAUC_macro                                          [0.9026233358710893]  ...   \nrecall_score_micro                                 [0.8977238239757208]  ...   \nAUC_weighted                                       [0.9026233358710894]  ...   \nbalanced_accuracy                                  [0.5942781010175104]  ...   \nweighted_accuracy                                  [0.9730611889183236]  ...   \nAUC_micro                                          [0.9684332494398789]  ...   \nf1_score_weighted                                  [0.8734704046383025]  ...   \nprecision_score_macro                               [0.771526544069397]  ...   \naverage_precision_score_micro                      [0.9689573904311022]  ...   \naverage_precision_score_macro                      [0.7372953415827233]  ...   \nnorm_macro_recall                                 [0.18855620203502088]  ...   \nf1_score_macro                                     [0.6263947343363969]  ...   \nrecall_score_macro                                 [0.5942781010175104]  ...   \naccuracy                                           [0.8977238239757208]  ...   \nlog_loss                                          [0.23485799802436438]  ...   \nmatthews_correlation                              [0.31999379338174755]  ...   \n\n                                 7496f569-5228-4588-a8ee-0521264f1d3d_37  \\\nrecall_score_weighted                               [0.9059180576631259]   \nprecision_score_weighted                            [0.8967906132065355]   \naverage_precision_score_weighted                    [0.9475102670049403]   \nprecision_score_micro                               [0.9059180576631259]   \nf1_score_micro                                      [0.9059180576631259]   \nAUC_macro                                           [0.9336923239362265]   \nrecall_score_micro                                  [0.9059180576631259]   \nAUC_weighted                                        [0.9336923239362265]   \nbalanced_accuracy                                   [0.7090161656913904]   \nweighted_accuracy                                    [0.954803471333651]   \nAUC_micro                                            [0.976917065218142]   \nf1_score_weighted                                   [0.8999468147095336]   \nprecision_score_macro                               [0.7699488986657671]   \naverage_precision_score_micro                       [0.9776468420988416]   \naverage_precision_score_macro                       [0.7964818798092093]   \nnorm_macro_recall                                  [0.41803233138278073]   \nf1_score_macro                                      [0.7339852034884933]   \nrecall_score_macro                                  [0.7090161656913904]   \naccuracy                                            [0.9059180576631259]   \nlog_loss                                           [0.32603849047954925]   \nmatthews_correlation                                [0.4750733995152005]   \n\n                                 7496f569-5228-4588-a8ee-0521264f1d3d_43  \\\nrecall_score_weighted                               [0.9141122913505311]   \nprecision_score_weighted                            [0.9088328306142887]   \naverage_precision_score_weighted                    [0.9522422634028505]   \nprecision_score_micro                               [0.9141122913505311]   \nf1_score_micro                                      [0.9141122913505311]   \nAUC_macro                                           [0.9432709638101167]   \nrecall_score_micro                                  [0.9141122913505311]   \nAUC_weighted                                        [0.9432709638101167]   \nbalanced_accuracy                                   [0.7503380587462745]   \nweighted_accuracy                                   [0.9547730032881345]   \nAUC_micro                                           [0.9789753638773053]   \nf1_score_weighted                                   [0.9109321212241842]   \nprecision_score_macro                               [0.7904154525215538]   \naverage_precision_score_micro                       [0.9799809298079264]   \naverage_precision_score_macro                        [0.811780006333918]   \nnorm_macro_recall                                   [0.5006761174925489]   \nf1_score_macro                                      [0.7682708052054297]   \nrecall_score_macro                                  [0.7503380587462745]   \naccuracy                                            [0.9141122913505311]   \nlog_loss                                           [0.18349425240335102]   \nmatthews_correlation                                [0.5392663186744249]   \n\n                                 7496f569-5228-4588-a8ee-0521264f1d3d_34  \\\nrecall_score_weighted                               [0.9132018209408195]   \nprecision_score_weighted                            [0.9074329436294158]   \naverage_precision_score_weighted                    [0.9541411484948241]   \nprecision_score_micro                               [0.9132018209408195]   \nf1_score_micro                                      [0.9132018209408195]   \nAUC_macro                                           [0.9442592067752529]   \nrecall_score_micro                                  [0.9132018209408195]   \nAUC_weighted                                         [0.944259206775253]   \nbalanced_accuracy                                   [0.7450888862955616]   \nweighted_accuracy                                    [0.954939715235299]   \nAUC_micro                                           [0.9795984627464707]   \nf1_score_weighted                                   [0.9096764096913943]   \nprecision_score_macro                               [0.7884731106837775]   \naverage_precision_score_micro                       [0.9805583578526404]   \naverage_precision_score_macro                       [0.8198704441305439]   \nnorm_macro_recall                                  [0.49017777259112316]   \nf1_score_macro                                      [0.7642816263884915]   \nrecall_score_macro                                  [0.7450888862955616]   \naccuracy                                            [0.9132018209408195]   \nlog_loss                                           [0.18012736943904312]   \nmatthews_correlation                                [0.5317952742313653]   \n\n                                 7496f569-5228-4588-a8ee-0521264f1d3d_38  \\\nrecall_score_weighted                               [0.9128983308042489]   \nprecision_score_weighted                            [0.9066944678995318]   \naverage_precision_score_weighted                    [0.9532809788141765]   \nprecision_score_micro                               [0.9128983308042489]   \nf1_score_micro                                      [0.9128983308042489]   \nAUC_macro                                            [0.944152695115468]   \nrecall_score_micro                                  [0.9128983308042489]   \nAUC_weighted                                         [0.944152695115468]   \nbalanced_accuracy                                   [0.7413656091448133]   \nweighted_accuracy                                   [0.9554852657106753]   \nAUC_micro                                            [0.979445842668687]   \nf1_score_weighted                                   [0.9090427105674237]   \nprecision_score_macro                               [0.7883118003819065]   \naverage_precision_score_micro                       [0.9804191415654441]   \naverage_precision_score_macro                        [0.816044708888549]   \nnorm_macro_recall                                   [0.4827312182896266]   \nf1_score_macro                                      [0.7618961292903779]   \nrecall_score_macro                                  [0.7413656091448133]   \naccuracy                                            [0.9128983308042489]   \nlog_loss                                           [0.18221578886744955]   \nmatthews_correlation                                [0.5275928480289197]   \n\n                                 7496f569-5228-4588-a8ee-0521264f1d3d_32  \\\nrecall_score_weighted                               [0.9095599393019727]   \nprecision_score_weighted                            [0.9032848035871041]   \naverage_precision_score_weighted                    [0.9528192485660603]   \nprecision_score_micro                               [0.9095599393019727]   \nf1_score_micro                                      [0.9095599393019727]   \nAUC_macro                                           [0.9413000350099194]   \nrecall_score_micro                                  [0.9095599393019727]   \nAUC_weighted                                        [0.9413000350099195]   \nbalanced_accuracy                                   [0.7347493826954674]   \nweighted_accuracy                                   [0.9529606719618214]   \nAUC_micro                                           [0.9787433482008191]   \nf1_score_weighted                                   [0.9057552449104291]   \nprecision_score_macro                               [0.7779291627830474]   \naverage_precision_score_micro                       [0.9797502437013483]   \naverage_precision_score_macro                       [0.8153852934435084]   \nnorm_macro_recall                                   [0.4694987653909348]   \nf1_score_macro                                      [0.7537458142982968]   \nrecall_score_macro                                  [0.7347493826954674]   \naccuracy                                            [0.9095599393019727]   \nlog_loss                                           [0.18373026131824677]   \nmatthews_correlation                                [0.5108569247700904]   \n\n                                 7496f569-5228-4588-a8ee-0521264f1d3d_44  \\\nrecall_score_weighted                                [0.910773899848255]   \nprecision_score_weighted                            [0.9046131382658897]   \naverage_precision_score_weighted                    [0.9527388952648794]   \nprecision_score_micro                                [0.910773899848255]   \nf1_score_micro                                      [0.9107738998482551]   \nAUC_macro                                           [0.9412273292247618]   \nrecall_score_micro                                   [0.910773899848255]   \nAUC_weighted                                        [0.9412273292247618]   \nbalanced_accuracy                                   [0.7378011732953966]   \nweighted_accuracy                                   [0.9537183490182449]   \nAUC_micro                                           [0.9789033367796428]   \nf1_score_weighted                                   [0.9070202751800881]   \nprecision_score_macro                               [0.7815422994681727]   \naverage_precision_score_micro                       [0.9798758954137006]   \naverage_precision_score_macro                       [0.8151950398201768]   \nnorm_macro_recall                                  [0.47560234659079326]   \nf1_score_macro                                      [0.7570512396097291]   \nrecall_score_macro                                  [0.7378011732953966]   \naccuracy                                             [0.910773899848255]   \nlog_loss                                           [0.20906686358242352]   \nmatthews_correlation                                [0.5174981706086134]   \n\n                                 7496f569-5228-4588-a8ee-0521264f1d3d_40  \\\nrecall_score_weighted                               [0.9089529590288316]   \nprecision_score_weighted                            [0.9014127099862761]   \naverage_precision_score_weighted                    [0.9511073721941207]   \nprecision_score_micro                               [0.9089529590288316]   \nf1_score_micro                                      [0.9089529590288316]   \nAUC_macro                                           [0.9395388878700818]   \nrecall_score_micro                                  [0.9089529590288316]   \nAUC_weighted                                        [0.9395388878700818]   \nbalanced_accuracy                                    [0.724934564793358]   \nweighted_accuracy                                   [0.9546397487041597]   \nAUC_micro                                           [0.9783002249695474]   \nf1_score_weighted                                    [0.904171698276927]   \nprecision_score_macro                               [0.7778202945900312]   \naverage_precision_score_micro                       [0.9793232684625253]   \naverage_precision_score_macro                       [0.8085857827448191]   \nnorm_macro_recall                                   [0.4498691295867161]   \nf1_score_macro                                       [0.747432163115131]   \nrecall_score_macro                                   [0.724934564793358]   \naccuracy                                            [0.9089529590288316]   \nlog_loss                                            [0.1885886628924551]   \nmatthews_correlation                                [0.4999655470304777]   \n\n                                 7496f569-5228-4588-a8ee-0521264f1d3d_45  \\\nrecall_score_weighted                               [0.9089529590288316]   \nprecision_score_weighted                            [0.9044670462454985]   \naverage_precision_score_weighted                    [0.9530727307978201]   \nprecision_score_micro                               [0.9089529590288316]   \nf1_score_micro                                      [0.9089529590288316]   \nAUC_macro                                           [0.9424512871239443]   \nrecall_score_micro                                  [0.9089529590288316]   \nAUC_weighted                                        [0.9424512871239444]   \nbalanced_accuracy                                   [0.7450648053985667]   \nweighted_accuracy                                   [0.9496419544756812]   \nAUC_micro                                           [0.9790270354908458]   \nf1_score_weighted                                   [0.9064064693565229]   \nprecision_score_macro                               [0.7741206941206942]   \naverage_precision_score_micro                       [0.9800141185919266]   \naverage_precision_score_macro                       [0.8160119279976998]   \nnorm_macro_recall                                  [0.49012961079713335]   \nf1_score_macro                                      [0.7584206945362264]   \nrecall_score_macro                                  [0.7450648053985667]   \naccuracy                                            [0.9089529590288316]   \nlog_loss                                           [0.20743540323316234]   \nmatthews_correlation                                [0.5183718146674563]   \n\n                                 7496f569-5228-4588-a8ee-0521264f1d3d_47  \\\nrecall_score_weighted                               [0.9132018209408195]   \nprecision_score_weighted                            [0.9087950016120808]   \naverage_precision_score_weighted                    [0.9550038900662638]   \nprecision_score_micro                               [0.9132018209408195]   \nf1_score_micro                                      [0.9132018209408195]   \nAUC_macro                                           [0.9469822005123674]   \nrecall_score_micro                                  [0.9132018209408195]   \nAUC_weighted                                        [0.9469822005123675]   \nbalanced_accuracy                                   [0.7545619406980126]   \nweighted_accuracy                                   [0.9525878120689563]   \nAUC_micro                                           [0.9802645752404548]   \nf1_score_weighted                                    [0.910655390887086]   \nprecision_score_macro                               [0.7863141643992017]   \naverage_precision_score_micro                       [0.9811832935243912]   \naverage_precision_score_macro                       [0.8224652794470817]   \nnorm_macro_recall                                   [0.5091238813960253]   \nf1_score_macro                                      [0.7691070942045604]   \nrecall_score_macro                                  [0.7545619406980126]   \naccuracy                                            [0.9132018209408195]   \nlog_loss                                           [0.18879642349578984]   \nmatthews_correlation                                [0.5399432908696639]   \n\n                                 7496f569-5228-4588-a8ee-0521264f1d3d_48  \nrecall_score_weighted                               [0.9132018209408195]  \nprecision_score_weighted                            [0.9041532438582534]  \naverage_precision_score_weighted                    [0.9551005853228514]  \nprecision_score_micro                               [0.9132018209408195]  \nf1_score_micro                                      [0.9132018209408195]  \nAUC_macro                                           [0.9465246634694645]  \nrecall_score_micro                                  [0.9132018209408195]  \nAUC_weighted                                        [0.9465246634694645]  \nbalanced_accuracy                                   [0.7178538548885147]  \nweighted_accuracy                                   [0.9617014368385345]  \nAUC_micro                                            [0.980201942981618]  \nf1_score_weighted                                   [0.9065484034760242]  \nprecision_score_macro                               [0.7970365234873225]  \naverage_precision_score_micro                       [0.9811201571098889]  \naverage_precision_score_macro                       [0.8231430960967817]  \nnorm_macro_recall                                  [0.43570770977702944]  \nf1_score_macro                                      [0.7490225844252689]  \nrecall_score_macro                                  [0.7178538548885147]  \naccuracy                                            [0.9132018209408195]  \nlog_loss                                           [0.19935175463239233]  \nmatthews_correlation                                [0.5087653749397497]  \n\n[21 rows x 48 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>7496f569-5228-4588-a8ee-0521264f1d3d_26</th>\n      <th>7496f569-5228-4588-a8ee-0521264f1d3d_23</th>\n      <th>7496f569-5228-4588-a8ee-0521264f1d3d_31</th>\n      <th>7496f569-5228-4588-a8ee-0521264f1d3d_4</th>\n      <th>7496f569-5228-4588-a8ee-0521264f1d3d_30</th>\n      <th>7496f569-5228-4588-a8ee-0521264f1d3d_29</th>\n      <th>7496f569-5228-4588-a8ee-0521264f1d3d_35</th>\n      <th>7496f569-5228-4588-a8ee-0521264f1d3d_33</th>\n      <th>7496f569-5228-4588-a8ee-0521264f1d3d_41</th>\n      <th>7496f569-5228-4588-a8ee-0521264f1d3d_5</th>\n      <th>...</th>\n      <th>7496f569-5228-4588-a8ee-0521264f1d3d_37</th>\n      <th>7496f569-5228-4588-a8ee-0521264f1d3d_43</th>\n      <th>7496f569-5228-4588-a8ee-0521264f1d3d_34</th>\n      <th>7496f569-5228-4588-a8ee-0521264f1d3d_38</th>\n      <th>7496f569-5228-4588-a8ee-0521264f1d3d_32</th>\n      <th>7496f569-5228-4588-a8ee-0521264f1d3d_44</th>\n      <th>7496f569-5228-4588-a8ee-0521264f1d3d_40</th>\n      <th>7496f569-5228-4588-a8ee-0521264f1d3d_45</th>\n      <th>7496f569-5228-4588-a8ee-0521264f1d3d_47</th>\n      <th>7496f569-5228-4588-a8ee-0521264f1d3d_48</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>recall_score_weighted</th>\n      <td>[0.9053110773899848]</td>\n      <td>[0.9004552352048558]</td>\n      <td>[0.91350531107739]</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.8980273141122913]</td>\n      <td>[0.91350531107739]</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.9122913505311078]</td>\n      <td>[0.9095599393019727]</td>\n      <td>[0.8977238239757208]</td>\n      <td>...</td>\n      <td>[0.9059180576631259]</td>\n      <td>[0.9141122913505311]</td>\n      <td>[0.9132018209408195]</td>\n      <td>[0.9128983308042489]</td>\n      <td>[0.9095599393019727]</td>\n      <td>[0.910773899848255]</td>\n      <td>[0.9089529590288316]</td>\n      <td>[0.9089529590288316]</td>\n      <td>[0.9132018209408195]</td>\n      <td>[0.9132018209408195]</td>\n    </tr>\n    <tr>\n      <th>precision_score_weighted</th>\n      <td>[0.8973300225368934]</td>\n      <td>[0.8843704047191627]</td>\n      <td>[0.9057268790091022]</td>\n      <td>[0.788565560086672]</td>\n      <td>[0.8933714514421347]</td>\n      <td>[0.9080100799328442]</td>\n      <td>[0.788565560086672]</td>\n      <td>[0.9082792354748976]</td>\n      <td>[0.9005324142771018]</td>\n      <td>[0.877014103638037]</td>\n      <td>...</td>\n      <td>[0.8967906132065355]</td>\n      <td>[0.9088328306142887]</td>\n      <td>[0.9074329436294158]</td>\n      <td>[0.9066944678995318]</td>\n      <td>[0.9032848035871041]</td>\n      <td>[0.9046131382658897]</td>\n      <td>[0.9014127099862761]</td>\n      <td>[0.9044670462454985]</td>\n      <td>[0.9087950016120808]</td>\n      <td>[0.9041532438582534]</td>\n    </tr>\n    <tr>\n      <th>average_precision_score_weighted</th>\n      <td>[0.9467800578009239]</td>\n      <td>[0.942782281265217]</td>\n      <td>[0.9498888718010676]</td>\n      <td>[0.9254567129958357]</td>\n      <td>[0.9472515231339906]</td>\n      <td>[0.9539319641567288]</td>\n      <td>[0.8011068409624182]</td>\n      <td>[0.949787196639461]</td>\n      <td>[0.948595276751151]</td>\n      <td>[0.9305869047831394]</td>\n      <td>...</td>\n      <td>[0.9475102670049403]</td>\n      <td>[0.9522422634028505]</td>\n      <td>[0.9541411484948241]</td>\n      <td>[0.9532809788141765]</td>\n      <td>[0.9528192485660603]</td>\n      <td>[0.9527388952648794]</td>\n      <td>[0.9511073721941207]</td>\n      <td>[0.9530727307978201]</td>\n      <td>[0.9550038900662638]</td>\n      <td>[0.9551005853228514]</td>\n    </tr>\n    <tr>\n      <th>precision_score_micro</th>\n      <td>[0.9053110773899848]</td>\n      <td>[0.9004552352048558]</td>\n      <td>[0.91350531107739]</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.8980273141122913]</td>\n      <td>[0.91350531107739]</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.9122913505311078]</td>\n      <td>[0.9095599393019727]</td>\n      <td>[0.8977238239757208]</td>\n      <td>...</td>\n      <td>[0.9059180576631259]</td>\n      <td>[0.9141122913505311]</td>\n      <td>[0.9132018209408195]</td>\n      <td>[0.9128983308042489]</td>\n      <td>[0.9095599393019727]</td>\n      <td>[0.910773899848255]</td>\n      <td>[0.9089529590288316]</td>\n      <td>[0.9089529590288316]</td>\n      <td>[0.9132018209408195]</td>\n      <td>[0.9132018209408195]</td>\n    </tr>\n    <tr>\n      <th>f1_score_micro</th>\n      <td>[0.9053110773899848]</td>\n      <td>[0.9004552352048558]</td>\n      <td>[0.91350531107739]</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.8980273141122913]</td>\n      <td>[0.91350531107739]</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.9122913505311078]</td>\n      <td>[0.9095599393019727]</td>\n      <td>[0.8977238239757208]</td>\n      <td>...</td>\n      <td>[0.9059180576631259]</td>\n      <td>[0.9141122913505311]</td>\n      <td>[0.9132018209408195]</td>\n      <td>[0.9128983308042489]</td>\n      <td>[0.9095599393019727]</td>\n      <td>[0.9107738998482551]</td>\n      <td>[0.9089529590288316]</td>\n      <td>[0.9089529590288316]</td>\n      <td>[0.9132018209408195]</td>\n      <td>[0.9132018209408195]</td>\n    </tr>\n    <tr>\n      <th>AUC_macro</th>\n      <td>[0.9323229544667286]</td>\n      <td>[0.9243114252741982]</td>\n      <td>[0.9355085792826485]</td>\n      <td>[0.8924264652762728]</td>\n      <td>[0.9300848203287229]</td>\n      <td>[0.9454956682171061]</td>\n      <td>[0.5]</td>\n      <td>[0.9391994398412884]</td>\n      <td>[0.9366663147150953]</td>\n      <td>[0.9026233358710893]</td>\n      <td>...</td>\n      <td>[0.9336923239362265]</td>\n      <td>[0.9432709638101167]</td>\n      <td>[0.9442592067752529]</td>\n      <td>[0.944152695115468]</td>\n      <td>[0.9413000350099194]</td>\n      <td>[0.9412273292247618]</td>\n      <td>[0.9395388878700818]</td>\n      <td>[0.9424512871239443]</td>\n      <td>[0.9469822005123674]</td>\n      <td>[0.9465246634694645]</td>\n    </tr>\n    <tr>\n      <th>recall_score_micro</th>\n      <td>[0.9053110773899848]</td>\n      <td>[0.9004552352048558]</td>\n      <td>[0.91350531107739]</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.8980273141122913]</td>\n      <td>[0.91350531107739]</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.9122913505311078]</td>\n      <td>[0.9095599393019727]</td>\n      <td>[0.8977238239757208]</td>\n      <td>...</td>\n      <td>[0.9059180576631259]</td>\n      <td>[0.9141122913505311]</td>\n      <td>[0.9132018209408195]</td>\n      <td>[0.9128983308042489]</td>\n      <td>[0.9095599393019727]</td>\n      <td>[0.910773899848255]</td>\n      <td>[0.9089529590288316]</td>\n      <td>[0.9089529590288316]</td>\n      <td>[0.9132018209408195]</td>\n      <td>[0.9132018209408195]</td>\n    </tr>\n    <tr>\n      <th>AUC_weighted</th>\n      <td>[0.9323229544667286]</td>\n      <td>[0.9243114252741981]</td>\n      <td>[0.9355085792826485]</td>\n      <td>[0.8924264652762729]</td>\n      <td>[0.9300848203287228]</td>\n      <td>[0.9454956682171062]</td>\n      <td>[0.5]</td>\n      <td>[0.9391994398412883]</td>\n      <td>[0.9366663147150953]</td>\n      <td>[0.9026233358710894]</td>\n      <td>...</td>\n      <td>[0.9336923239362265]</td>\n      <td>[0.9432709638101167]</td>\n      <td>[0.944259206775253]</td>\n      <td>[0.944152695115468]</td>\n      <td>[0.9413000350099195]</td>\n      <td>[0.9412273292247618]</td>\n      <td>[0.9395388878700818]</td>\n      <td>[0.9424512871239444]</td>\n      <td>[0.9469822005123675]</td>\n      <td>[0.9465246634694645]</td>\n    </tr>\n    <tr>\n      <th>balanced_accuracy</th>\n      <td>[0.7157791929935704]</td>\n      <td>[0.5887112459641343]</td>\n      <td>[0.7298660546414077]</td>\n      <td>[0.5]</td>\n      <td>[0.5530043697566163]</td>\n      <td>[0.7476280316460033]</td>\n      <td>[0.5]</td>\n      <td>[0.7552334272488317]</td>\n      <td>[0.7146191420902589]</td>\n      <td>[0.5942781010175104]</td>\n      <td>...</td>\n      <td>[0.7090161656913904]</td>\n      <td>[0.7503380587462745]</td>\n      <td>[0.7450888862955616]</td>\n      <td>[0.7413656091448133]</td>\n      <td>[0.7347493826954674]</td>\n      <td>[0.7378011732953966]</td>\n      <td>[0.724934564793358]</td>\n      <td>[0.7450648053985667]</td>\n      <td>[0.7545619406980126]</td>\n      <td>[0.7178538548885147]</td>\n    </tr>\n    <tr>\n      <th>weighted_accuracy</th>\n      <td>[0.9523667175348892]</td>\n      <td>[0.9778528352011013]</td>\n      <td>[0.9590979710926082]</td>\n      <td>[0.9843450583187134]</td>\n      <td>[0.9836871784830753]</td>\n      <td>[0.9546881526557157]</td>\n      <td>[0.9843450583187134]</td>\n      <td>[0.9512845845371567]</td>\n      <td>[0.9579584661902998]</td>\n      <td>[0.9730611889183236]</td>\n      <td>...</td>\n      <td>[0.954803471333651]</td>\n      <td>[0.9547730032881345]</td>\n      <td>[0.954939715235299]</td>\n      <td>[0.9554852657106753]</td>\n      <td>[0.9529606719618214]</td>\n      <td>[0.9537183490182449]</td>\n      <td>[0.9546397487041597]</td>\n      <td>[0.9496419544756812]</td>\n      <td>[0.9525878120689563]</td>\n      <td>[0.9617014368385345]</td>\n    </tr>\n    <tr>\n      <th>AUC_micro</th>\n      <td>[0.9763184666149336]</td>\n      <td>[0.9733974085902907]</td>\n      <td>[0.9776897446584123]</td>\n      <td>[0.9660630789742125]</td>\n      <td>[0.9737985313656365]</td>\n      <td>[0.9798544260513353]</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.9775007426067454]</td>\n      <td>[0.9772814375945528]</td>\n      <td>[0.9684332494398789]</td>\n      <td>...</td>\n      <td>[0.976917065218142]</td>\n      <td>[0.9789753638773053]</td>\n      <td>[0.9795984627464707]</td>\n      <td>[0.979445842668687]</td>\n      <td>[0.9787433482008191]</td>\n      <td>[0.9789033367796428]</td>\n      <td>[0.9783002249695474]</td>\n      <td>[0.9790270354908458]</td>\n      <td>[0.9802645752404548]</td>\n      <td>[0.980201942981618]</td>\n    </tr>\n    <tr>\n      <th>f1_score_weighted</th>\n      <td>[0.900338566208004]</td>\n      <td>[0.8736142051995415]</td>\n      <td>[0.9082225005039931]</td>\n      <td>[0.8353395018439429]</td>\n      <td>[0.8612210753333667]</td>\n      <td>[0.9101791103151579]</td>\n      <td>[0.8353395018439429]</td>\n      <td>[0.9100167967602312]</td>\n      <td>[0.903380422654646]</td>\n      <td>[0.8734704046383025]</td>\n      <td>...</td>\n      <td>[0.8999468147095336]</td>\n      <td>[0.9109321212241842]</td>\n      <td>[0.9096764096913943]</td>\n      <td>[0.9090427105674237]</td>\n      <td>[0.9057552449104291]</td>\n      <td>[0.9070202751800881]</td>\n      <td>[0.904171698276927]</td>\n      <td>[0.9064064693565229]</td>\n      <td>[0.910655390887086]</td>\n      <td>[0.9065484034760242]</td>\n    </tr>\n    <tr>\n      <th>precision_score_macro</th>\n      <td>[0.7665123477974385]</td>\n      <td>[0.8087657878957855]</td>\n      <td>[0.7939883913764512]</td>\n      <td>[0.4440060698027314]</td>\n      <td>[0.8748853631694791]</td>\n      <td>[0.7889312152158643]</td>\n      <td>[0.4440060698027314]</td>\n      <td>[0.7831697452464919]</td>\n      <td>[0.7827600597434545]</td>\n      <td>[0.771526544069397]</td>\n      <td>...</td>\n      <td>[0.7699488986657671]</td>\n      <td>[0.7904154525215538]</td>\n      <td>[0.7884731106837775]</td>\n      <td>[0.7883118003819065]</td>\n      <td>[0.7779291627830474]</td>\n      <td>[0.7815422994681727]</td>\n      <td>[0.7778202945900312]</td>\n      <td>[0.7741206941206942]</td>\n      <td>[0.7863141643992017]</td>\n      <td>[0.7970365234873225]</td>\n    </tr>\n    <tr>\n      <th>average_precision_score_micro</th>\n      <td>[0.9773886046702771]</td>\n      <td>[0.9746121226103798]</td>\n      <td>[0.9781877451663599]</td>\n      <td>[0.9667154350191383]</td>\n      <td>[0.9751136594768869]</td>\n      <td>[0.9808030510504245]</td>\n      <td>[0.8445594902839405]</td>\n      <td>[0.9785050452690133]</td>\n      <td>[0.9783771487826396]</td>\n      <td>[0.9689573904311022]</td>\n      <td>...</td>\n      <td>[0.9776468420988416]</td>\n      <td>[0.9799809298079264]</td>\n      <td>[0.9805583578526404]</td>\n      <td>[0.9804191415654441]</td>\n      <td>[0.9797502437013483]</td>\n      <td>[0.9798758954137006]</td>\n      <td>[0.9793232684625253]</td>\n      <td>[0.9800141185919266]</td>\n      <td>[0.9811832935243912]</td>\n      <td>[0.9811201571098889]</td>\n    </tr>\n    <tr>\n      <th>average_precision_score_macro</th>\n      <td>[0.7928848499541777]</td>\n      <td>[0.7791553533474418]</td>\n      <td>[0.8072969447001531]</td>\n      <td>[0.7212806449332911]</td>\n      <td>[0.7959972638369314]</td>\n      <td>[0.8183292144360064]</td>\n      <td>[0.5]</td>\n      <td>[0.8031572195939872]</td>\n      <td>[0.7986233728068056]</td>\n      <td>[0.7372953415827233]</td>\n      <td>...</td>\n      <td>[0.7964818798092093]</td>\n      <td>[0.811780006333918]</td>\n      <td>[0.8198704441305439]</td>\n      <td>[0.816044708888549]</td>\n      <td>[0.8153852934435084]</td>\n      <td>[0.8151950398201768]</td>\n      <td>[0.8085857827448191]</td>\n      <td>[0.8160119279976998]</td>\n      <td>[0.8224652794470817]</td>\n      <td>[0.8231430960967817]</td>\n    </tr>\n    <tr>\n      <th>norm_macro_recall</th>\n      <td>[0.4315583859871408]</td>\n      <td>[0.17742249192826853]</td>\n      <td>[0.4597321092828155]</td>\n      <td>[0.0]</td>\n      <td>[0.10600873951323253]</td>\n      <td>[0.49525606329200667]</td>\n      <td>[0.0]</td>\n      <td>[0.5104668544976634]</td>\n      <td>[0.4292382841805178]</td>\n      <td>[0.18855620203502088]</td>\n      <td>...</td>\n      <td>[0.41803233138278073]</td>\n      <td>[0.5006761174925489]</td>\n      <td>[0.49017777259112316]</td>\n      <td>[0.4827312182896266]</td>\n      <td>[0.4694987653909348]</td>\n      <td>[0.47560234659079326]</td>\n      <td>[0.4498691295867161]</td>\n      <td>[0.49012961079713335]</td>\n      <td>[0.5091238813960253]</td>\n      <td>[0.43570770977702944]</td>\n    </tr>\n    <tr>\n      <th>f1_score_macro</th>\n      <td>[0.7373294496397362]</td>\n      <td>[0.6212887870981125]</td>\n      <td>[0.7564455720076384]</td>\n      <td>[0.4703423886834914]</td>\n      <td>[0.5689429618001046]</td>\n      <td>[0.7660249518570629]</td>\n      <td>[0.4703423886834914]</td>\n      <td>[0.7681623091472727]</td>\n      <td>[0.7421454831932772]</td>\n      <td>[0.6263947343363969]</td>\n      <td>...</td>\n      <td>[0.7339852034884933]</td>\n      <td>[0.7682708052054297]</td>\n      <td>[0.7642816263884915]</td>\n      <td>[0.7618961292903779]</td>\n      <td>[0.7537458142982968]</td>\n      <td>[0.7570512396097291]</td>\n      <td>[0.747432163115131]</td>\n      <td>[0.7584206945362264]</td>\n      <td>[0.7691070942045604]</td>\n      <td>[0.7490225844252689]</td>\n    </tr>\n    <tr>\n      <th>recall_score_macro</th>\n      <td>[0.7157791929935704]</td>\n      <td>[0.5887112459641343]</td>\n      <td>[0.7298660546414077]</td>\n      <td>[0.5]</td>\n      <td>[0.5530043697566163]</td>\n      <td>[0.7476280316460033]</td>\n      <td>[0.5]</td>\n      <td>[0.7552334272488317]</td>\n      <td>[0.7146191420902589]</td>\n      <td>[0.5942781010175104]</td>\n      <td>...</td>\n      <td>[0.7090161656913904]</td>\n      <td>[0.7503380587462745]</td>\n      <td>[0.7450888862955616]</td>\n      <td>[0.7413656091448133]</td>\n      <td>[0.7347493826954674]</td>\n      <td>[0.7378011732953966]</td>\n      <td>[0.724934564793358]</td>\n      <td>[0.7450648053985667]</td>\n      <td>[0.7545619406980126]</td>\n      <td>[0.7178538548885147]</td>\n    </tr>\n    <tr>\n      <th>accuracy</th>\n      <td>[0.9053110773899848]</td>\n      <td>[0.9004552352048558]</td>\n      <td>[0.91350531107739]</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.8980273141122913]</td>\n      <td>[0.91350531107739]</td>\n      <td>[0.8880121396054628]</td>\n      <td>[0.9122913505311078]</td>\n      <td>[0.9095599393019727]</td>\n      <td>[0.8977238239757208]</td>\n      <td>...</td>\n      <td>[0.9059180576631259]</td>\n      <td>[0.9141122913505311]</td>\n      <td>[0.9132018209408195]</td>\n      <td>[0.9128983308042489]</td>\n      <td>[0.9095599393019727]</td>\n      <td>[0.910773899848255]</td>\n      <td>[0.9089529590288316]</td>\n      <td>[0.9089529590288316]</td>\n      <td>[0.9132018209408195]</td>\n      <td>[0.9132018209408195]</td>\n    </tr>\n    <tr>\n      <th>log_loss</th>\n      <td>[0.22085530776058526]</td>\n      <td>[0.22929027929074844]</td>\n      <td>[0.3230992784115869]</td>\n      <td>[0.2537019558675518]</td>\n      <td>[0.23291460104923292]</td>\n      <td>[0.1780776949679011]</td>\n      <td>[0.3543657349711066]</td>\n      <td>[0.2154093345805161]</td>\n      <td>[0.1902415116275064]</td>\n      <td>[0.23485799802436438]</td>\n      <td>...</td>\n      <td>[0.32603849047954925]</td>\n      <td>[0.18349425240335102]</td>\n      <td>[0.18012736943904312]</td>\n      <td>[0.18221578886744955]</td>\n      <td>[0.18373026131824677]</td>\n      <td>[0.20906686358242352]</td>\n      <td>[0.1885886628924551]</td>\n      <td>[0.20743540323316234]</td>\n      <td>[0.18879642349578984]</td>\n      <td>[0.19935175463239233]</td>\n    </tr>\n    <tr>\n      <th>matthews_correlation</th>\n      <td>[0.4796157600853126]</td>\n      <td>[0.3310045181282741]</td>\n      <td>[0.5199151916844855]</td>\n      <td>[0.0]</td>\n      <td>[0.28192596479060544]</td>\n      <td>[0.5349671694786223]</td>\n      <td>[0.0]</td>\n      <td>[0.537677913150394]</td>\n      <td>[0.4926894414924297]</td>\n      <td>[0.31999379338174755]</td>\n      <td>...</td>\n      <td>[0.4750733995152005]</td>\n      <td>[0.5392663186744249]</td>\n      <td>[0.5317952742313653]</td>\n      <td>[0.5275928480289197]</td>\n      <td>[0.5108569247700904]</td>\n      <td>[0.5174981706086134]</td>\n      <td>[0.4999655470304777]</td>\n      <td>[0.5183718146674563]</td>\n      <td>[0.5399432908696639]</td>\n      <td>[0.5087653749397497]</td>\n    </tr>\n  </tbody>\n</table>\n<p>21 rows × 48 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 19,
      "metadata": {
        "gather": {
          "logged": 1618337083893
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Retrieve the Best Model"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Retrieve best model from Pipeline Run\n",
        "best_model_output = pipeline_run.get_pipeline_output(best_model_output_name)\n",
        "num_file_downloaded = best_model_output.download('.', show_progress=True)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading azureml/7496f569-5228-4588-a8ee-0521264f1d3d/model_data\n",
            "Downloaded azureml/7496f569-5228-4588-a8ee-0521264f1d3d/model_data, 1 files out of an estimated total of 1\n"
          ]
        }
      ],
      "execution_count": 20,
      "metadata": {
        "gather": {
          "logged": 1618337085206
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "\n",
        "with open(best_model_output._path_on_datastore, \"rb\" ) as f:\n",
        "    best_model = pickle.load(f)\n",
        "best_model"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 21,
          "data": {
            "text/plain": "PipelineWithYTransformations(Pipeline={'memory': None,\n                                       'steps': [('datatransformer',\n                                                  DataTransformer(enable_dnn=None,\n                                                                  enable_feature_sweeping=None,\n                                                                  feature_sweeping_config=None,\n                                                                  feature_sweeping_timeout=None,\n                                                                  featurization_config=None,\n                                                                  force_text_dnn=None,\n                                                                  is_cross_validation=None,\n                                                                  is_onnx_compatible=None,\n                                                                  logger=None,\n                                                                  observer=None,\n                                                                  task=None,\n                                                                  working_dir=None))...\n                                                                                                                                scale_pos_weight=1,\n                                                                                                                                seed=None,\n                                                                                                                                silent=None,\n                                                                                                                                subsample=0.5,\n                                                                                                                                tree_method='hist',\n                                                                                                                                verbose=-10,\n                                                                                                                                verbosity=0))],\n                                                                                                      verbose=False))],\n                                                                                flatten_transform=None,\n                                                                                weights=[0.21428571428571427,\n                                                                                         0.2857142857142857,\n                                                                                         0.07142857142857142,\n                                                                                         0.07142857142857142,\n                                                                                         0.07142857142857142,\n                                                                                         0.07142857142857142,\n                                                                                         0.21428571428571427]))],\n                                       'verbose': False},\n                             y_transformer={},\n                             y_transformer_name='LabelEncoder')"
          },
          "metadata": {}
        }
      ],
      "execution_count": 21,
      "metadata": {
        "gather": {
          "logged": 1618337107841
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "best_model.steps"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 22,
          "data": {
            "text/plain": "[('datatransformer',\n  DataTransformer(enable_dnn=None, enable_feature_sweeping=None,\n                  feature_sweeping_config=None, feature_sweeping_timeout=None,\n                  featurization_config=None, force_text_dnn=None,\n                  is_cross_validation=None, is_onnx_compatible=None, logger=None,\n                  observer=None, task=None, working_dir=None)),\n ('prefittedsoftvotingclassifier',\n  PreFittedSoftVotingClassifier(classification_labels=None,\n                                estimators=[('29',\n                                             Pipeline(memory=None,\n                                                      steps=[('standardscalerwrapper',\n                                                              <azureml.automl.runtime.shared.model_wrappers.StandardScalerWrapper object at 0x7f598da87d68>),\n                                                             ('xgboostclassifier',\n                                                              XGBoostClassifier(base_score=0.5,\n                                                                                booster='gbtree',\n                                                                                colsample_bylevel=1,\n                                                                                colsample_bynode=1,\n                                                                                colsample_bytree=1,\n                                                                                e...\n                                                                                reg_alpha=2.0833333333333335,\n                                                                                reg_lambda=0.10416666666666667,\n                                                                                scale_pos_weight=1,\n                                                                                seed=None,\n                                                                                silent=None,\n                                                                                subsample=0.5,\n                                                                                tree_method='hist',\n                                                                                verbose=-10,\n                                                                                verbosity=0))],\n                                                      verbose=False))],\n                                flatten_transform=None,\n                                weights=[0.21428571428571427, 0.2857142857142857,\n                                         0.07142857142857142, 0.07142857142857142,\n                                         0.07142857142857142, 0.07142857142857142,\n                                         0.21428571428571427]))]"
          },
          "metadata": {}
        }
      ],
      "execution_count": 22,
      "metadata": {
        "gather": {
          "logged": 1618337108276
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Test the Model\n",
        "#### Load Test Data\n",
        "For the test data, it should have the same preparation step as the train data. Otherwise it might get failed at the preprocessing step."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_test = Dataset.Tabular.from_delimited_files(path='https://automlsamplenotebookdata.blob.core.windows.net/automl-sample-notebook-data/bankmarketing_train.csv')\n",
        "df_test = dataset_test.to_pandas_dataframe()\n",
        "df_test = df_test[pd.notnull(df_test['y'])]\n",
        "\n",
        "y_test = df_test['y']\n",
        "X_test = df_test.drop(['y'], axis=1)"
      ],
      "outputs": [],
      "execution_count": 23,
      "metadata": {
        "gather": {
          "logged": 1618337112570
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Testing Our Best Fitted Model\n",
        "\n",
        "We will use confusion matrix to see how our model works."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "ypred = best_model.predict(X_test)\n",
        "cm = confusion_matrix(y_test, ypred)"
      ],
      "outputs": [],
      "execution_count": 24,
      "metadata": {
        "gather": {
          "logged": 1618337123556
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualize the confusion matrix\n",
        "pd.DataFrame(cm).style.background_gradient(cmap='Blues', low=0, high=0.9)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 25,
          "data": {
            "text/plain": "<pandas.io.formats.style.Styler at 0x7f5985779198>",
            "text/html": "<style  type=\"text/css\" >\n    #T_d1538ada_9c82_11eb_8af7_2bd1f29e8f5crow0_col0 {\n            background-color:  #63a8d3;\n            color:  #000000;\n        }    #T_d1538ada_9c82_11eb_8af7_2bd1f29e8f5crow0_col1 {\n            background-color:  #f7fbff;\n            color:  #000000;\n        }    #T_d1538ada_9c82_11eb_8af7_2bd1f29e8f5crow1_col0 {\n            background-color:  #f7fbff;\n            color:  #000000;\n        }    #T_d1538ada_9c82_11eb_8af7_2bd1f29e8f5crow1_col1 {\n            background-color:  #63a8d3;\n            color:  #000000;\n        }</style><table id=\"T_d1538ada_9c82_11eb_8af7_2bd1f29e8f5c\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >0</th>        <th class=\"col_heading level0 col1\" >1</th>    </tr></thead><tbody>\n                <tr>\n                        <th id=\"T_d1538ada_9c82_11eb_8af7_2bd1f29e8f5clevel0_row0\" class=\"row_heading level0 row0\" >0</th>\n                        <td id=\"T_d1538ada_9c82_11eb_8af7_2bd1f29e8f5crow0_col0\" class=\"data row0 col0\" >28876</td>\n                        <td id=\"T_d1538ada_9c82_11eb_8af7_2bd1f29e8f5crow0_col1\" class=\"data row0 col1\" >382</td>\n            </tr>\n            <tr>\n                        <th id=\"T_d1538ada_9c82_11eb_8af7_2bd1f29e8f5clevel0_row1\" class=\"row_heading level0 row1\" >1</th>\n                        <td id=\"T_d1538ada_9c82_11eb_8af7_2bd1f29e8f5crow1_col0\" class=\"data row1 col0\" >790</td>\n                        <td id=\"T_d1538ada_9c82_11eb_8af7_2bd1f29e8f5crow1_col1\" class=\"data row1 col1\" >2902</td>\n            </tr>\n    </tbody></table>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 25,
      "metadata": {
        "gather": {
          "logged": 1618337123944
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Publish and run from REST endpoint\n",
        "\n",
        "Run the following code to publish the pipeline to your workspace. In your workspace in the portal, you can see metadata for the pipeline including run history and durations. You can also run the pipeline manually from the portal.\n",
        "\n",
        "Additionally, publishing the pipeline enables a REST endpoint to rerun the pipeline from any HTTP library on any platform.\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "published_pipeline = pipeline_run.publish_pipeline(\n",
        "    name=\"Bankmarketing Train\", description=\"Training bankmarketing pipeline\", version=\"1.0\")\n",
        "\n",
        "published_pipeline\n"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 26,
          "data": {
            "text/plain": "Pipeline(Name: Bankmarketing Train,\nId: c6551462-0c03-45e4-964a-9608bfe5f1c8,\nStatus: Active,\nEndpoint: https://southcentralus.api.azureml.ms/pipelines/v1.0/subscriptions/6b4af8be-9931-443e-90f6-c4c34a1f9737/resourceGroups/aml-quickstarts-142596/providers/Microsoft.MachineLearningServices/workspaces/quick-starts-ws-142596/PipelineRuns/PipelineSubmit/c6551462-0c03-45e4-964a-9608bfe5f1c8)",
            "text/html": "<table style=\"width:100%\"><tr><th>Name</th><th>Id</th><th>Status</th><th>Endpoint</th></tr><tr><td>Bankmarketing Train</td><td><a href=\"https://ml.azure.com/pipelines/c6551462-0c03-45e4-964a-9608bfe5f1c8?wsid=/subscriptions/6b4af8be-9931-443e-90f6-c4c34a1f9737/resourcegroups/aml-quickstarts-142596/workspaces/quick-starts-ws-142596\" target=\"_blank\" rel=\"noopener\">c6551462-0c03-45e4-964a-9608bfe5f1c8</a></td><td>Active</td><td><a href=\"https://southcentralus.api.azureml.ms/pipelines/v1.0/subscriptions/6b4af8be-9931-443e-90f6-c4c34a1f9737/resourceGroups/aml-quickstarts-142596/providers/Microsoft.MachineLearningServices/workspaces/quick-starts-ws-142596/PipelineRuns/PipelineSubmit/c6551462-0c03-45e4-964a-9608bfe5f1c8\" target=\"_blank\" rel=\"noopener\">REST Endpoint</a></td></tr></table>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 26,
      "metadata": {
        "gather": {
          "logged": 1618337124340
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Authenticate once again, to retrieve the `auth_header` so that the endpoint can be used"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.core.authentication import InteractiveLoginAuthentication\n",
        "\n",
        "interactive_auth = InteractiveLoginAuthentication()\n",
        "auth_header = interactive_auth.get_authentication_header()\n",
        "\n"
      ],
      "outputs": [],
      "execution_count": 27,
      "metadata": {
        "gather": {
          "logged": 1618337124797
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Get the REST url from the endpoint property of the published pipeline object. You can also find the REST url in your workspace in the portal. Build an HTTP POST request to the endpoint, specifying your authentication header. Additionally, add a JSON payload object with the experiment name and the batch size parameter. As a reminder, the process_count_per_node is passed through to ParallelRunStep because you defined it is defined as a PipelineParameter object in the step configuration.\n",
        "\n",
        "Make the request to trigger the run. Access the Id key from the response dict to get the value of the run id.\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "\n",
        "rest_endpoint = published_pipeline.endpoint\n",
        "response = requests.post(rest_endpoint, \n",
        "                         headers=auth_header, \n",
        "                         json={\"ExperimentName\": \"pipeline-rest-endpoint\"}\n",
        "                        )"
      ],
      "outputs": [],
      "execution_count": 28,
      "metadata": {
        "gather": {
          "logged": 1618337125593
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "    response.raise_for_status()\n",
        "except Exception:    \n",
        "    raise Exception(\"Received bad response from the endpoint: {}\\n\"\n",
        "                    \"Response Code: {}\\n\"\n",
        "                    \"Headers: {}\\n\"\n",
        "                    \"Content: {}\".format(rest_endpoint, response.status_code, response.headers, response.content))\n",
        "\n",
        "run_id = response.json().get('Id')\n",
        "print('Submitted pipeline run: ', run_id)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Submitted pipeline run:  0dce7b44-f520-48c8-9def-9c08af0fd49d\n"
          ]
        }
      ],
      "execution_count": 29,
      "metadata": {
        "gather": {
          "logged": 1618337126288
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Use the run id to monitor the status of the new run. This will take another 10-15 min to run and will look similar to the previous pipeline run, so if you don't need to see another pipeline run, you can skip watching the full output."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from azureml.pipeline.core.run import PipelineRun\n",
        "from azureml.widgets import RunDetails\n",
        "\n",
        "published_pipeline_run = PipelineRun(ws.experiments[\"pipeline-rest-endpoint\"], run_id)\n",
        "RunDetails(published_pipeline_run).show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "_PipelineWidget(widget_settings={'childWidgetDisplay': 'popup', 'send_telemetry': False, 'log_level': 'INFO', …",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "8130e1fe62b74c309f941e6537412d56"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/aml.mini.widget.v1": "{\"status\": \"Completed\", \"workbench_run_details_uri\": \"https://ml.azure.com/runs/0dce7b44-f520-48c8-9def-9c08af0fd49d?wsid=/subscriptions/6b4af8be-9931-443e-90f6-c4c34a1f9737/resourcegroups/aml-quickstarts-142596/workspaces/quick-starts-ws-142596&tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\", \"run_id\": \"0dce7b44-f520-48c8-9def-9c08af0fd49d\", \"run_properties\": {\"run_id\": \"0dce7b44-f520-48c8-9def-9c08af0fd49d\", \"created_utc\": \"2021-04-13T18:05:24.794408Z\", \"properties\": {\"azureml.runsource\": \"azureml.PipelineRun\", \"runSource\": \"Unavailable\", \"runType\": \"HTTP\", \"azureml.parameters\": \"{}\", \"azureml.pipelineid\": \"c6551462-0c03-45e4-964a-9608bfe5f1c8\"}, \"tags\": {\"azureml.pipelineid\": \"c6551462-0c03-45e4-964a-9608bfe5f1c8\", \"azureml.pipelineComponent\": \"pipelinerun\"}, \"end_time_utc\": \"2021-04-13T18:05:29.766311Z\", \"status\": \"Completed\", \"log_files\": {\"logs/azureml/executionlogs.txt\": \"https://mlstrg142596.blob.core.windows.net/azureml/ExperimentRun/dcid.0dce7b44-f520-48c8-9def-9c08af0fd49d/logs/azureml/executionlogs.txt?sv=2019-02-02&sr=b&sig=mwJHb7yqoxh%2FKMcMpV9tnMK4Go7rz9sy1EYc%2FDGZHE4%3D&st=2021-04-13T17%3A57%3A34Z&se=2021-04-14T02%3A07%3A34Z&sp=r\", \"logs/azureml/stderrlogs.txt\": \"https://mlstrg142596.blob.core.windows.net/azureml/ExperimentRun/dcid.0dce7b44-f520-48c8-9def-9c08af0fd49d/logs/azureml/stderrlogs.txt?sv=2019-02-02&sr=b&sig=IvnXRFw3Zm2VEKOMtlue7VuLLk8XO7dvs06xWNKWKJY%3D&st=2021-04-13T17%3A57%3A35Z&se=2021-04-14T02%3A07%3A35Z&sp=r\", \"logs/azureml/stdoutlogs.txt\": \"https://mlstrg142596.blob.core.windows.net/azureml/ExperimentRun/dcid.0dce7b44-f520-48c8-9def-9c08af0fd49d/logs/azureml/stdoutlogs.txt?sv=2019-02-02&sr=b&sig=4BwqBOo2o3gzSVD4xD1p0oyxlf%2F0wt%2FL2z4eEXHg9GQ%3D&st=2021-04-13T17%3A57%3A35Z&se=2021-04-14T02%3A07%3A35Z&sp=r\"}, \"log_groups\": [[\"logs/azureml/executionlogs.txt\", \"logs/azureml/stderrlogs.txt\", \"logs/azureml/stdoutlogs.txt\"]], \"run_duration\": \"0:00:04\", \"run_number\": \"1\", \"run_queued_details\": {\"status\": \"Finished\", \"details\": null}}, \"child_runs\": [{\"run_id\": \"acd7d755-dd8d-47ff-945b-cd59a029b3b3\", \"name\": \"automl_module\", \"status\": \"Finished\", \"start_time\": \"2021-04-13T18:05:29.306103Z\", \"created_time\": \"2021-04-13T18:05:29.306103Z\", \"end_time\": \"2021-04-13T18:05:29.384366Z\", \"duration\": \"0:00:00\", \"run_number\": 2, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2021-04-13T18:05:29.306103Z\", \"is_reused\": \"Yes\"}], \"children_metrics\": {\"categories\": null, \"series\": null, \"metricName\": null}, \"run_metrics\": [], \"run_logs\": \"[2021-04-13 18:05:29Z] Completing processing run id acd7d755-dd8d-47ff-945b-cd59a029b3b3.\\n[2021-04-13 18:05:29Z] Finishing experiment: no runs left and nothing to schedule.\\n\\nRun is completed.\", \"graph\": {\"datasource_nodes\": {\"32d4d5a2\": {\"node_id\": \"32d4d5a2\", \"name\": \"BankMarketing Dataset\"}}, \"module_nodes\": {\"402ee70e\": {\"node_id\": \"402ee70e\", \"name\": \"automl_module\", \"status\": \"Finished\", \"_is_reused\": true, \"run_id\": \"acd7d755-dd8d-47ff-945b-cd59a029b3b3\"}}, \"edges\": [{\"source_node_id\": \"32d4d5a2\", \"source_node_name\": \"BankMarketing Dataset\", \"source_name\": \"data\", \"target_name\": \"training_data\", \"dst_node_id\": \"402ee70e\", \"dst_node_name\": \"automl_module\"}], \"child_runs\": [{\"run_id\": \"acd7d755-dd8d-47ff-945b-cd59a029b3b3\", \"name\": \"automl_module\", \"status\": \"Finished\", \"start_time\": \"2021-04-13T18:05:29.306103Z\", \"created_time\": \"2021-04-13T18:05:29.306103Z\", \"end_time\": \"2021-04-13T18:05:29.384366Z\", \"duration\": \"0:00:00\", \"run_number\": 2, \"metric\": null, \"run_type\": \"azureml.StepRun\", \"training_percent\": null, \"created_time_dt\": \"2021-04-13T18:05:29.306103Z\", \"is_reused\": \"Yes\"}]}, \"widget_settings\": {\"childWidgetDisplay\": \"popup\", \"send_telemetry\": false, \"log_level\": \"INFO\", \"sdk_version\": \"1.26.0\"}, \"loading\": false}"
          },
          "metadata": {}
        }
      ],
      "execution_count": 30,
      "metadata": {
        "gather": {
          "logged": 1618337256891
        }
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": null,
      "metadata": {}
    }
  ],
  "metadata": {
    "order_index": 11,
    "exclude_from_index": false,
    "task": "Demonstrates the use of AutoMLStep",
    "deployment": [
      "None"
    ],
    "authors": [
      {
        "name": "sanpil"
      }
    ],
    "star_tag": [
      "featured"
    ],
    "kernel_info": {
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.9",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "compute": [
      "AML Compute"
    ],
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3"
    },
    "tags": [
      "None"
    ],
    "datasets": [
      "Custom"
    ],
    "categories": [
      "how-to-use-azureml",
      "machine-learning-pipelines",
      "intro-to-pipelines"
    ],
    "category": "tutorial",
    "framework": [
      "Automated Machine Learning"
    ],
    "friendly_name": "How to use AutoMLStep with AML Pipelines",
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}